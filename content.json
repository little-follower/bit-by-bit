{"meta":{"title":"小跟班博客","subtitle":"记录自己的成长与不负韶华","description":"灵魂的欲望是命运的先知","author":"小跟班","url":"https://little-follower.github.io/bit-by-bit.github.io","root":"/bit-by-bit.github.io/"},"pages":[{"title":"图库","date":"2023-10-25T16:15:43.000Z","updated":"2023-10-25T16:34:24.924Z","comments":true,"path":"Gallery/index.html","permalink":"https://little-follower.github.io/bit-by-bit.github.io/Gallery/index.html","excerpt":"","text":"壁纸 AI生成的好的图片 漫威 关于漫威的图片"},{"title":"categories","date":"2023-10-25T03:43:03.000Z","updated":"2023-10-25T03:52:13.037Z","comments":true,"path":"categories/index.html","permalink":"https://little-follower.github.io/bit-by-bit.github.io/categories/index.html","excerpt":"","text":""},{"title":"link","date":"2023-10-25T03:52:30.000Z","updated":"2023-10-25T15:36:49.258Z","comments":true,"path":"link/index.html","permalink":"https://little-follower.github.io/bit-by-bit.github.io/link/index.html","excerpt":"","text":"友链页面我会持续优化"},{"title":"tags","date":"2023-10-25T03:51:14.000Z","updated":"2023-10-25T03:51:45.418Z","comments":true,"path":"tags/index.html","permalink":"https://little-follower.github.io/bit-by-bit.github.io/tags/index.html","excerpt":"","text":""},{"title":"AI图片","date":"2023-10-25T16:15:43.000Z","updated":"2023-10-25T16:34:41.249Z","comments":true,"path":"Gallery/ai/index.html","permalink":"https://little-follower.github.io/bit-by-bit.github.io/Gallery/ai/index.html","excerpt":"","text":"[{\"url\":\"https://raw.githubusercontent.com/little-follower/backet/main/butterfly/childandCloud.jpg\",\"alt\":\"\"},{\"url\":\"https://raw.githubusercontent.com/little-follower/backet/main/butterfly/eq.jpg\",\"alt\":\"\"},{\"url\":\"https://raw.githubusercontent.com/little-follower/backet/main/butterfly/gildAndGrita.jpg\",\"alt\":\"\"},{\"url\":\"https://raw.githubusercontent.com/little-follower/backet/main/butterfly/mountain.jpg\",\"alt\":\"\"},{\"url\":\"https://raw.githubusercontent.com/little-follower/backet/main/butterfly/titleBackgroud.jpg\",\"alt\":\"\"}]"}],"posts":[{"title":"Mybatis基础01-核心配置文件一","slug":"Mybatis基础01-核心配置文件","date":"2023-11-02T08:18:00.000Z","updated":"2023-11-03T08:06:43.305Z","comments":false,"path":"2023/11/02/Mybatis基础01-核心配置文件/","link":"","permalink":"https://little-follower.github.io/bit-by-bit.github.io/2023/11/02/Mybatis%E5%9F%BA%E7%A1%8001-%E6%A0%B8%E5%BF%83%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6/","excerpt":"","text":"Mybatis核心配置文件一 Mybatis的核心配置文件包含了会深深影响Mybatis行为的设置和属性信息。那Mybatis的核心配置文件到底长什么样子呢？我们借助核心配置文件的文档类型定义和中文帮助文档一起来学习一下。首先下载一份核心配置文件的文档类型定义，记事本打开，简单介绍一下。 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;&lt;!-- --&gt;&lt;!-- 这里的configuration 的括号里面的是mybatis核心配置文件的属性，其中是必须要按照顺序进行书写。1、问号：表示0个或1个2、星号：表示多个3、属性名1（属性名2*），属性1表示configuration的子属性，属性2*：表示是属性1的子属性，允许多个4、type CDATA #REQUIRED 表示 属性的类型是字符串，且不能为空--&gt;&lt;!ELEMENT configuration (properties?, settings?, typeAliases?, typeHandlers?, objectFactory?, objectWrapperFactory?, reflectorFactory?, plugins?, environments?, databaseIdProvider?, mappers?)&gt;&lt;!ELEMENT databaseIdProvider (property*)&gt;&lt;!ATTLIST databaseIdProvidertype CDATA #REQUIRED #表示必填&gt;&lt;!ELEMENT properties (property*)&gt;&lt;!ATTLIST propertiesresource CDATA #IMPLIEDurl CDATA #IMPLIED&gt;&lt;!ELEMENT property EMPTY&gt;&lt;!ATTLIST propertyname CDATA #REQUIREDvalue CDATA #REQUIRED&gt;&lt;!ELEMENT settings (setting+)&gt;&lt;!ELEMENT setting EMPTY&gt;&lt;!ATTLIST settingname CDATA #REQUIREDvalue CDATA #REQUIRED&gt;&lt;!ELEMENT typeAliases (typeAlias*,package*)&gt;&lt;!ELEMENT typeAlias EMPTY&gt;&lt;!ATTLIST typeAliastype CDATA #REQUIREDalias CDATA #IMPLIED&gt;&lt;!ELEMENT typeHandlers (typeHandler*,package*)&gt;&lt;!ELEMENT typeHandler EMPTY&gt;&lt;!ATTLIST typeHandlerjavaType CDATA #IMPLIEDjdbcType CDATA #IMPLIEDhandler CDATA #REQUIRED&gt;&lt;!ELEMENT objectFactory (property*)&gt;&lt;!ATTLIST objectFactorytype CDATA #REQUIRED&gt;&lt;!ELEMENT objectWrapperFactory EMPTY&gt;&lt;!ATTLIST objectWrapperFactorytype CDATA #REQUIRED&gt;&lt;!ELEMENT reflectorFactory EMPTY&gt;&lt;!ATTLIST reflectorFactorytype CDATA #REQUIRED&gt;&lt;!ELEMENT plugins (plugin+)&gt;&lt;!ELEMENT plugin (property*)&gt;&lt;!ATTLIST plugininterceptor CDATA #REQUIRED&gt;&lt;!ELEMENT environments (environment+)&gt;&lt;!ATTLIST environmentsdefault CDATA #REQUIRED&gt;&lt;!ELEMENT environment (transactionManager,dataSource)&gt;&lt;!ATTLIST environmentid CDATA #REQUIRED&gt;&lt;!ELEMENT transactionManager (property*)&gt;&lt;!ATTLIST transactionManagertype CDATA #REQUIRED&gt;&lt;!ELEMENT dataSource (property*)&gt;&lt;!ATTLIST dataSourcetype CDATA #REQUIRED&gt;&lt;!ELEMENT mappers (mapper*,package*)&gt;&lt;!ELEMENT mapper EMPTY&gt;&lt;!ATTLIST mapperresource CDATA #IMPLIEDurl CDATA #IMPLIEDclass CDATA #IMPLIED&gt;&lt;!ELEMENT package EMPTY&gt;&lt;!ATTLIST packagename CDATA #REQUIRED&gt; properties 属性 使用方式一： 将数据源中四要素提取处来，成为全局变量。 123456&lt;properties&gt; &lt;property name=&quot;driver&quot; value=&quot;com.mysql.jdbc.Driver&quot;/&gt; &lt;property name=&quot;url&quot; value=&quot;jdbc:mysql://127.0.0.1:3306/mybatis01-01&quot;/&gt; &lt;property name=&quot;username&quot; value=&quot;root&quot;/&gt; &lt;property name=&quot;password&quot; value=&quot;123456&quot;/&gt;&lt;/properties&gt; 我们定义两个environment,使用变量调用的方式获得四要素的属性值,这样就是表达出上面JDBC连接四要素成为全局变量的方便性。 1234567891011121314151617181920&lt;environments default=&quot;development&quot;&gt; &lt;environment id=&quot;development&quot;&gt; &lt;transactionManager type=&quot;JDBC&quot;/&gt; &lt;dataSource type=&quot;POOLED&quot;&gt; &lt;property name=&quot;driver&quot; value=&quot;$&#123;driver&#125;&quot;/&gt; &lt;property name=&quot;url&quot; value=&quot;$&#123;url&#125;&quot;/&gt; &lt;property name=&quot;username&quot; value=&quot;$&#123;username&#125;&quot;/&gt; &lt;property name=&quot;password&quot; value=&quot;$&#123;password&#125;&quot;/&gt; &lt;/dataSource&gt; &lt;/environment&gt; &lt;environment id=&quot;development123&quot;&gt; &lt;transactionManager type=&quot;JDBC&quot;/&gt; &lt;dataSource type=&quot;POOLED&quot;&gt; &lt;property name=&quot;driver&quot; value=&quot;$&#123;driver&#125;&quot;/&gt; &lt;property name=&quot;url&quot; value=&quot;$&#123;url&#125;&quot;/&gt; &lt;property name=&quot;username&quot; value=&quot;$&#123;username&#125;&quot;/&gt; &lt;propey name=&quot;password&quot; value=&quot;$&#123;password&#125;&quot;/&gt; &lt;/dataSource&gt; &lt;/environment&gt; &lt;/environments 执行单元测试，查询所有的部门信息结果如下: 使用方式二：(推荐使用) 在src/main/resources/下创建一个属性文件，一般取名为jdbc.properties。然后在该属性文件中保存四要素信息 12345#使用properties方式二，将jdbc连接四要素提取到单独的以properties后缀文件里面driver=com.mysql.jdbc.Driverurl=jdbc:mysql://127.0.0.1:3306/mybatis01-01username=rootpassword=123456 使用properties标签加载属性文件 1&lt;properties resource=&quot;jdbc.properties&quot;/&gt; 使用变量调用的方式获得四要素的属性值 （同上） 执行单元测试，查询所有的部门信息结果如下: 测试properties属性的优先级 不改变原有的properties文件的url，我们在核心配置文件中的properties添加额外的属性，我们url的数据库名改为一个其他的。 123&lt;properties resource=&quot;jdbc.properties&quot;&gt; &lt;property name=&quot;url&quot; value=&quot;jdbc:mysql://127.0.0.1:3306/mybatis01-05&quot;/&gt;&lt;/properties&gt; 执行结果如下： 成功执行，说明额外的properties属性优先级比核心配置文件里面的属性要高， 反之，如果我们将核心配置文件中的url的数据库改外&#x2F;mybatis01-01，properties文件的url的数据库改为mybatis01-05 1234driver=com.mysql.jdbc.Driverurl=jdbc:mysql://127.0.0.1:3306/mybatis01-05username=rootpassword=123456 123&lt;properties resource=&quot;jdbc.properties&quot;&gt; &lt;property name=&quot;url&quot; value=&quot;jdbc:mysql://127.0.0.1:3306/mybatis01-01&quot;/&gt;&lt;/properties&gt; 执行结果如下：失败，报错找不到mybatis01-05数据库 通过上面的测试，综合文档中属性（properties）结论可知： 如果一个属性在不只一个地方进行了配置，那么，MyBatis 将按照下面的顺序来加载： 首先读取在 properties 元素体内指定的属性。 然后根据 properties 元素中的 resource 属性读取类路径下属性文件，或根据 url 属性指定的路径读取属性文件，并覆盖之前读取过的同名属性。 最后读取作为方法参数传递的属性，并覆盖之前读取过的同名属性。 因此，通过方法参数传递的属性具有最高优先级，resource&#x2F;url 属性中指定的配置文件次之，最低优先级的则是 properties 元素中指定的属性。 如果我们就想核心配置文件中的url生效，我们可以这样写 1234&lt;!--强制在properties中使url生效，可以改name的名字再调用中也引用此配置的name值--&gt;&lt;properties resource=&quot;jdbc.properties&quot;&gt; &lt;property name=&quot;url3&quot; value=&quot;jdbc:mysql://127.0.0.1:3306/mybatis01-01&quot;/&gt;&lt;/properties&gt;--&gt; 1234567891011&lt;environments default=&quot;development&quot;&gt; &lt;environment id=&quot;development&quot;&gt; &lt;transactionManager type=&quot;JDBC&quot;/&gt; &lt;dataSource type=&quot;POOLED&quot;&gt; &lt;property name=&quot;driver&quot; value=&quot;$&#123;driver&#125;&quot;/&gt; &lt;property name=&quot;url&quot; value=&quot;$&#123;url3&#125;&quot;/&gt; &lt;property name=&quot;username&quot; value=&quot;$&#123;username&#125;&quot;/&gt; &lt;property name=&quot;password&quot; value=&quot;$&#123;password&#125;&quot;/&gt; &lt;/dataSource&gt; &lt;/environment&gt;&lt;/environments&gt; 执行结果成功！这里就偷懒不截图了~ 使用方法三：方法参数传递的属性 也可以在SqlSessionFactoryBuilder.build()方法中传入属性值 多添加一个数据源环境：此时配置文件中，设置使用的数据源是id=&quot;development&quot; 1234567891011121314151617181920212223242526&lt;properties resource=&quot;jdbc.properties&quot;&gt; &lt;property name=&quot;url3&quot; value=&quot;jdbc:mysql://127.0.0.1:3306/mybatis01-01&quot;/&gt; &lt;/properties&gt; &lt;environments default=&quot;development&quot;&gt; &lt;environment id=&quot;development&quot;&gt; &lt;transactionManager type=&quot;JDBC&quot;/&gt; &lt;dataSource type=&quot;POOLED&quot;&gt; &lt;property name=&quot;driver&quot; value=&quot;$&#123;driver&#125;&quot;/&gt; &lt;property name=&quot;url&quot; value=&quot;$&#123;url&#125;&quot;/&gt; &lt;property name=&quot;username&quot; value=&quot;$&#123;username&#125;&quot;/&gt; &lt;property name=&quot;password&quot; value=&quot;$&#123;password&#125;&quot;/&gt; &lt;/dataSource&gt; &lt;/environment&gt; &lt;environment id=&quot;development123&quot;&gt; &lt;transactionManager type=&quot;JDBC&quot;/&gt; &lt;dataSource type=&quot;POOLED&quot;&gt; &lt;property name=&quot;driver&quot; value=&quot;$&#123;driver&#125;&quot;/&gt; &lt;property name=&quot;url&quot; value=&quot;$&#123;url3&#125;&quot;/&gt; &lt;property name=&quot;username&quot; value=&quot;$&#123;username&#125;&quot;/&gt; &lt;property name=&quot;password&quot; value=&quot;$&#123;password&#125;&quot;/&gt; &lt;/dataSource&gt; &lt;/environment&gt; &lt;/environments&gt; &lt;mappers&gt; &lt;mapper resource=&quot;mapper/DeptMapper.xml&quot;/&gt; &lt;/mappers&gt; 在单元测试代码中构建SqlSessionFactory对象是，进行特殊声明我们要是用的环境名称。 123456789101112131415161718192021public class MyBatisTest &#123; @Test public void selectAll () throws Exception&#123; // 1.加载mybatis的配置文件 InputStream io = Resources.getResourceAsStream(&quot;mybatisConfig.xml&quot;); // 2.获得session对象，接收对象 SqlSessionFactoryBuilder sqlSessionFactoryBuilder = new SqlSessionFactoryBuilder();// SqlSessionFactory sqlSessionFactory = sqlSessionFactoryBuilder.build(io); SqlSessionFactory sqlSessionFactory = sqlSessionFactoryBuilder.build(io,&quot;development123&quot;); SqlSession session = sqlSessionFactory.openSession(); List&lt;Dept&gt; list = session.selectList(&quot;selectAllDept&quot;); for(Dept dept:list) &#123; System.out.println(dept.toString()); &#125; session.close(); &#125;&#125; 这里我补充: SqlSessionFacotry 构建SqlSessionFactory的重载方法如下： 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677public class SqlSessionFactoryBuilder &#123; public SqlSessionFactoryBuilder() &#123; &#125; public SqlSessionFactory build(Reader reader) &#123; return this.build((Reader)reader, (String)null, (Properties)null); &#125; public SqlSessionFactory build(Reader reader, String environment) &#123; return this.build((Reader)reader, environment, (Properties)null); &#125; public SqlSessionFactory build(Reader reader, Properties properties) &#123; return this.build((Reader)reader, (String)null, properties); &#125; public SqlSessionFactory build(Reader reader, String environment, Properties properties) &#123; SqlSessionFactory var5; try &#123; XMLConfigBuilder parser = new XMLConfigBuilder(reader, environment, properties); var5 = this.build(parser.parse()); &#125; catch (Exception var14) &#123; throw ExceptionFactory.wrapException(&quot;Error building SqlSession.&quot;, var14); &#125; finally &#123; ErrorContext.instance().reset(); try &#123; if (reader != null) &#123; reader.close(); &#125; &#125; catch (IOException var13) &#123; &#125; &#125; return var5; &#125; public SqlSessionFactory build(InputStream inputStream) &#123; return this.build((InputStream)inputStream, (String)null, (Properties)null); &#125; public SqlSessionFactory build(InputStream inputStream, String environment) &#123; return this.build((InputStream)inputStream, environment, (Properties)null); &#125; public SqlSessionFactory build(InputStream inputStream, Properties properties) &#123; return this.build((InputStream)inputStream, (String)null, properties); &#125; public SqlSessionFactory build(InputStream inputStream, String environment, Properties properties) &#123; SqlSessionFactory var5; try &#123; XMLConfigBuilder parser = new XMLConfigBuilder(inputStream, environment, properties); var5 = this.build(parser.parse()); &#125; catch (Exception var14) &#123; throw ExceptionFactory.wrapException(&quot;Error building SqlSession.&quot;, var14); &#125; finally &#123; ErrorContext.instance().reset(); try &#123; if (inputStream != null) &#123; inputStream.close(); &#125; &#125; catch (IOException var13) &#123; &#125; &#125; return var5; &#125; public SqlSessionFactory build(Configuration config) &#123; return new DefaultSqlSessionFactory(config); &#125;&#125; 执行结果成功~ 默认值设置 就是在我们的jdbc.properties或者核心配置文件都没有设置password属性，这样的情况我们可以设置默认属性值， 12345678910111213141516171819202122232425262728&lt;!--强制在properties中使url生效，可以改name的名字再调用中也引用此配置的name值--&gt; &lt;properties resource=&quot;jdbc.properties&quot;&gt; &lt;property name=&quot;url3&quot; value=&quot;jdbc:mysql://127.0.0.1:3306/mybatis01-01&quot;/&gt;&lt;!-- &lt;property name=&quot;password&quot; value=&quot;$&#123;password:ut_user&#125;&quot;/&gt;--&gt; &lt;!-- 如果属性 &#x27;username&#x27; 没有被配置，&#x27;username&#x27; 属性的值将为 &#x27;ut_user&#x27; --&gt; &lt;property name=&quot;org.apache.ibatis.parsing.PropertyParser.enable-default-value&quot; value=&quot;true&quot;/&gt; &lt;!-- 启用默认值特性 --&gt; &lt;/properties&gt; &lt;environments default=&quot;development&quot;&gt; &lt;environment id=&quot;development&quot;&gt; &lt;transactionManager type=&quot;JDBC&quot;/&gt; &lt;dataSource type=&quot;POOLED&quot;&gt; &lt;property name=&quot;driver&quot; value=&quot;$&#123;driver&#125;&quot;/&gt; &lt;property name=&quot;url&quot; value=&quot;$&#123;url&#125;&quot;/&gt; &lt;property name=&quot;username&quot; value=&quot;$&#123;username&#125;&quot;/&gt; &lt;property name=&quot;password&quot; value=&quot;$&#123;password:root&#125;&quot;/&gt; &lt;/dataSource&gt; &lt;/environment&gt; &lt;environment id=&quot;development123&quot;&gt; &lt;transactionManager type=&quot;JDBC&quot;/&gt; &lt;dataSource type=&quot;POOLED&quot;&gt; &lt;property name=&quot;driver&quot; value=&quot;$&#123;driver&#125;&quot;/&gt; &lt;property name=&quot;url&quot; value=&quot;$&#123;url3&#125;&quot;/&gt; &lt;property name=&quot;username&quot; value=&quot;$&#123;username&#125;&quot;/&gt; &lt;property name=&quot;password&quot; value=&quot;$&#123;password:root&#125;&quot;/&gt; &lt;/dataSource&gt; &lt;/environment&gt; &lt;/environments&gt; 参考文档中属性（properties）结论可知：","categories":[{"name":"Mybatis","slug":"Mybatis","permalink":"https://little-follower.github.io/bit-by-bit.github.io/categories/Mybatis/"}],"tags":[{"name":"Mybatis基础","slug":"Mybatis基础","permalink":"https://little-follower.github.io/bit-by-bit.github.io/tags/Mybatis%E5%9F%BA%E7%A1%80/"}]},{"title":"Mybatis01基础-环境搭建","slug":"Mybatis的环境搭建","date":"2023-10-31T08:31:50.000Z","updated":"2023-11-03T08:01:59.620Z","comments":false,"path":"2023/10/31/Mybatis的环境搭建/","link":"","permalink":"https://little-follower.github.io/bit-by-bit.github.io/2023/10/31/Mybatis%E7%9A%84%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/","excerpt":"","text":"项目结构 添加项目依赖1234567891011121314151617181920212223242526272829&lt;dependencies&gt; &lt;!--mybatis 核心包--&gt; &lt;dependency&gt; &lt;groupId&gt;org.mybatis&lt;/groupId&gt; &lt;artifactId&gt;mybatis&lt;/artifactId&gt; &lt;version&gt;3.5.12&lt;/version&gt; &lt;/dependency&gt; &lt;!--mysql驱动包--&gt; &lt;dependency&gt; &lt;groupId&gt;mysql&lt;/groupId&gt; &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt; &lt;version&gt;8.0.33&lt;/version&gt; &lt;/dependency&gt; &lt;!--junit测试包--&gt; &lt;dependency&gt; &lt;groupId&gt;junit&lt;/groupId&gt; &lt;artifactId&gt;junit&lt;/artifactId&gt; &lt;version&gt;4.13.2&lt;/version&gt; &lt;/dependency&gt; &lt;!--日志包，方便查看sql语句--&gt; &lt;dependency&gt; &lt;groupId&gt;org.slf4j&lt;/groupId&gt; &lt;artifactId&gt;slf4j-log4j12&lt;/artifactId&gt; &lt;version&gt;1.7.36&lt;/version&gt; &lt;/dependency&gt; &lt;/dependencies&gt; 创建SqlMapconfig.xml全局配置文件 创建mybatis-config.xml模板文件 idea工具栏菜单先点击File-&gt;Settings-&gt;Editor-&gt;选择File and Code Templates 浏览器查看Mybatis的官方文档，点击入门就能看到，复制到idea中 1234567891011121314151617181920&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;&lt;!DOCTYPE configuration PUBLIC &quot;-//mybatis.org//DTD Config 3.0//EN&quot; &quot;https://mybatis.org/dtd/mybatis-3-config.dtd&quot;&gt;&lt;configuration&gt; &lt;environments default=&quot;development&quot;&gt; &lt;environment id=&quot;development&quot;&gt; &lt;transactionManager type=&quot;JDBC&quot;/&gt; &lt;dataSource type=&quot;POOLED&quot;&gt; &lt;property name=&quot;driver&quot; value=&quot;$&#123;driver&#125;&quot;/&gt; &lt;property name=&quot;url&quot; value=&quot;$&#123;url&#125;&quot;/&gt; &lt;property name=&quot;username&quot; value=&quot;$&#123;username&#125;&quot;/&gt; &lt;property name=&quot;password&quot; value=&quot;$&#123;password&#125;&quot;/&gt; &lt;/dataSource&gt; &lt;/environment&gt; &lt;/environments&gt; &lt;mappers&gt; &lt;mapper resource=&quot;org/mybatis/example/BlogMapper.xml&quot;/&gt; &lt;/mappers&gt;&lt;/configuration&gt; 创建MybatisMapper.xml模板文件 idea工具栏菜单先点击File-&gt;Settings-&gt;Editor-&gt;选择File and Code Templates 浏览器查看Mybatis的官方文档，点击探究已映射的 SQL 语句就能看到，复制到idea中 123456789&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;&lt;!DOCTYPE mapper PUBLIC &quot;-//mybatis.org//DTD Mapper 3.0//EN&quot; &quot;https://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;&gt;&lt;mapper namespace=&quot;org.mybatis.example.BlogMapper&quot;&gt; &lt;select id=&quot;selectBlog&quot; resultType=&quot;Blog&quot;&gt; select * from Blog where id = #&#123;id&#125; &lt;/select&gt;&lt;/mapper&gt; idea创建SqlMapconfig文件 点击File选择NEW点击我们刚刚创建的模板，并填写数据库连接配置信息 1234567891011121314151617181920&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;&lt;!DOCTYPE configuration PUBLIC &quot;-//mybatis.org//DTD Config 3.0//EN&quot; &quot;https://mybatis.org/dtd/mybatis-3-config.dtd&quot;&gt;&lt;configuration&gt; &lt;environments default=&quot;development&quot;&gt; &lt;environment id=&quot;development&quot;&gt; &lt;transactionManager type=&quot;JDBC&quot;/&gt; &lt;dataSource type=&quot;POOLED&quot;&gt; &lt;property name=&quot;driver&quot; value=&quot;com.mysql.jdbc.Driver&quot;/&gt; &lt;property name=&quot;url&quot; value=&quot;jdbc:mysql://127.0.0.1:3306/test&quot;/&gt; &lt;property name=&quot;username&quot; value=&quot;root&quot;/&gt; &lt;property name=&quot;password&quot; value=&quot;123456&quot;/&gt; &lt;/dataSource&gt; &lt;/environment&gt; &lt;/environments&gt; &lt;mappers&gt; &lt;mapper resource=&quot;org/mybatis/example/BlogMapper.xml&quot;/&gt; &lt;/mappers&gt;&lt;/configuration&gt; 创建实体类1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556package com.bit.by.bit.pojos;/** * @author: chengqing Zhang * @description: 部门实体类 * @date:Create：in 2023/11/2 10:56 * @modified By： */public class Dept &#123; private Integer deptno; private String dname; private String loc; public Dept() &#123; &#125; public Dept(Integer deptno, String dname, String loc) &#123; this.deptno = deptno; this.dname = dname; this.loc = loc; &#125; public Integer getDeptno() &#123; return deptno; &#125; public void setDeptno(Integer deptno) &#123; this.deptno = deptno; &#125; public String getDname() &#123; return dname; &#125; public void setDname(String dname) &#123; this.dname = dname; &#125; public String getLoc() &#123; return loc; &#125; public void setLoc(String loc) &#123; this.loc = loc; &#125; @Override public String toString() &#123; return &quot;Dept&#123;&quot; + &quot;deptno=&quot; + deptno + &quot;, dname=&#x27;&quot; + dname + &#x27;\\&#x27;&#x27; + &quot;, loc=&#x27;&quot; + loc + &#x27;\\&#x27;&#x27; + &#x27;&#125;&#x27;; &#125;&#125; 创建mapper.xml映射文件1234567891011&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;&lt;!DOCTYPE mapper PUBLIC &quot;-//mybatis.org//DTD Mapper 3.0//EN&quot; &quot;https://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;&gt;&lt;mapper namespace=&quot;org.mybatis.example.BlogMapper&quot;&gt; &lt;select id=&quot;selectAllDept&quot; resultType=&quot;com.bit.by.bit.pojos.Dept&quot;&gt; select * from dept &lt;/select&gt;&lt;/mapper&gt; 创建Junit测试类123456789101112131415161718192021public class MyBatisTest &#123; @Test public void selectAll () throws Exception&#123; // 1.加载mybatis的配置文件 InputStream io = Resources.getResourceAsStream(&quot;mybatisConfig.xml&quot;); // 2.获得session对象，接收对象 SqlSessionFactoryBuilder sqlSessionFactoryBuilder = new SqlSessionFactoryBuilder(); SqlSessionFactory sqlSessionFactory = sqlSessionFactoryBuilder.build(io); SqlSession session = sqlSessionFactory.openSession(); List&lt;Dept&gt; list = session.selectList(&quot;selectAllDept&quot;); for(Dept dept:list) &#123; System.out.println(dept.toString()); &#125; session.close(); &#125;&#125; 添加log4j查询生成的sql语句12345678# Global logging configurationlog4j.rootLogger=ERROR, stdout# MyBatis logging configuration...log4j.logger.org.mybatis.example.BlogMapper=TRACE# Console output...log4j.appender.stdout=org.apache.log4j.ConsoleAppenderlog4j.appender.stdout.layout=org.apache.log4j.PatternLayoutlog4j.appender.stdout.layout.ConversionPattern=%5p [%t] - %m%n 项目源代码源代码请参考链接Repository中的mybatis-&gt;myabtis-1","categories":[{"name":"Mybatis","slug":"Mybatis","permalink":"https://little-follower.github.io/bit-by-bit.github.io/categories/Mybatis/"}],"tags":[{"name":"Mybatis基础","slug":"Mybatis基础","permalink":"https://little-follower.github.io/bit-by-bit.github.io/tags/Mybatis%E5%9F%BA%E7%A1%80/"}]},{"title":"Mybatis01基础-框架介绍","slug":"mybatis-01基础","date":"2023-10-31T03:05:09.000Z","updated":"2023-11-03T08:01:34.563Z","comments":false,"path":"2023/10/31/mybatis-01基础/","link":"","permalink":"https://little-follower.github.io/bit-by-bit.github.io/2023/10/31/mybatis-01%E5%9F%BA%E7%A1%80/","excerpt":"","text":"Mybatis框架基础 本章主要学习关于mybatis的框架介绍、介绍Mybatis、讲解结构图核心类工作流程、resources下文件打包问题、环境搭建、核心配置文件1、核心配置文件2、核心配置文件3、mapper映射文件1、mapper映射文件2。 Mybatis 的基本信息 Mybatis本是Apache的一个开源项目iBatis，2010年这个项目由apache software foundation迁移到google code，并且改名为Mybatis。2013年迁移到GitHub。当前，最新版本是MyBatis 3.5.5，其发布时间是2020年06月04日。Mybatis是一个基于Java的数据持久层ORM框架。把实体类和SQL语句之间建立了映射联系，是一种半自动化ORM实现。 ORM 对象关系映射，是一种数据持久化技术 O: Object 对象&#x3D;&#x3D;&#x3D;java里的实例类（对象） R: Relation 关系&#x3D;&#x3D;&#x3D;关系型数据库表（表） M：Mapping 映射&#x3D;&#x3D;&#x3D;提供一种机制，实现映射 半自动化：需要写一些SQL，才能完成，指定功能 全自动化：无需使用SQL语句，直接操作实体类对象，就可以对应的操作数据库表里的数据。 有全自动为什么还需要半自动化？&#x3D;&#x3D;&#x3D;多表查询的时候，分页查询的时候，全自动在进行修改的时候反而很复杂 Mybatis支持定制化SQL，存储过程以及高级映射。 Mybatis可以使用简单的XML或注解来配置和映射原生信息，将接口和Java的POJOs（Plain Ordinary Java Object，普通的Java对象）映射成数据库中的记录。 Mybatis与传统的JDBC比较 Mybatis避免了几乎所有的JDBC代码和手动设置参数以及获取结果集 传统JDBC实现根据用户名查询用户信息代码： 123456789101112131415Class.forName(&quot;com.mysql.jdbc.Driver&quot;);String url = &quot;jdbc:mysql://localhost:3306/test&quot;;String user =&quot;root&quot;;String password = &quot;root&quot;;Connection connection = DriverManager.getConnection(url,user,password);String sql = &quot;SELECT * FROM userinfo where username = ?&quot;;PreparedStatement statement = connection.prepareStatement(sql);statement .setString(1,&quot;王五&quot;);ResultSet rs = statement.exctuteQuery();while(rs.next()) &#123; System.out.printLn(rs.getString(&quot;id&quot;)+rs.getString(&quot;username&quot;));&#125;rs.close();statement.close();connection.close; 发现JDBC操作非常繁琐 定义数据连接参数 打开数据库连接 声明SQL语句 预编译并执行SQL语句 遍历查询结果（如果需要的话），对每一条记录进行处理 处理事务 关闭数据库连接 以上步骤每次除了3和5步骤，其他全部是重复工作。 Mybaits配置文件实现根据用户名查询用户信息代码： 12345&lt;mapper namespace=&quot;test&quot;&gt; &lt;select id=&quot;findUserByName&quot; parameterType=&quot;java.lang.String&quot; resultType=&quot;com.by.pojo.User&quot;&gt; SELECT * FROM USERINFO WHERE USERNAME LIKE &#x27;%$&#123;value&#125;%&#x27; &lt;/select&gt;&lt;/mapper&gt; 为什么学习Mybatis？ 为了和数据库进行交互，通常的做法是将SQL语句写在Java代码中，SQL语句和Java代码耦合在一起不利于后期维护修改，而Mybatis能够帮助我们将SQL语句和Java代码分离，方便了后期因需求变动而对SQL语句进行修改。 采用ORM思想解决了实体对象和数据库映射的问题，对JDBC进行了分装，屏蔽了JDBC api底层访问细节，使我们不用与JDBC api打交道，就可以完成对数据库的持久化操作；同时Mybatis封装了绝大部分JDBC中参数设置和返回值接收工作，我们不需要编写大量臃肿代码。 Mybatis框架功能架构 Mybatis 框架功能架构分为三层： API 接口层： 首先接口层使我们打交道最多的。核心对象是SqlSession,它是上层应用和Mybatis打交道的桥梁，SqlSession上定义了非常多的对数据库的操作方法。接口层在接收到调用请求的时候，会调用核心处理层的相应模块来完成具体的数据库操作。 数据库处理层&#x2F;核心处理层：跟数据库操作相关的动作都是在这一层完成的。核心处理层主要做了这几件事： 把接口中传入的参数解析并且映射成JDBC类型； 解析XML文件中的SQL语句，包括插入参数和动态SQL的生成； 执行SQL语句； 处理结果集，并映射成Java对象； 基础支撑层：基础支持层主要是一些抽象出来的通用的功能（实现复用），比如数据源、缓存、日志、XML解析、反射、IO、事务等等这些功能。为上层的数据处理层提供最基础的支撑。 Mybatis核心类及工作流程SqlSessionFactory 每个基于Mybatis的应用都是以一个SqlSessionFactory的实例为中心。SqlSessionFactory的实例可以通过SqlSessionFactoryBuilder获得。而SqlSessionFactoryBuilder则可以从XML配置文件或者通过Java的方式构建出SqlSessionFactory的实例。SqlSessionFactory一但被创建就应该在应用的运行期间一直存在。一个SqlSessionFactory对应配置文件中的一个环境（environment），如果你要是用读个数据库就配置多个环境分别对应一个SqlSessionFactory。 SqlSession SqlSession是一个接口，它有两个实现类，分别是DefaultSqlSession（默认使用）以及SqlSessionManager。SqlSession通过内部存放的执行器（Executor）来对数据进行CRUD。此外SqlSession不是线程安全的，因为每一次操作完数据库都要调用cloes对其进行关闭，官方建议通过try-finally来保证总是关闭SqlSession。 Executor Executor（执行器）接口有两个实现类，其中BaseExecutor有三个继承类分别是BatchExcutor（重用语句并执行批量更新），ReuseExecutor（重用预处理语句prepared statement，跟Simple的唯一区别就是内部缓存statement），SimpleExecutor（默认，每次都会创建新的statement）。以上三个就是主要的Executor、我们可以用CachingExecutor内装饰前面的三个执行器目的就是用来实现缓存。 MappedStatement MappedStatement就是用来存放我们SQL映射文件中的信息包括SQL语句，输入参数、输出参数等等。一个SQL对应一个MappedStatement对象。 Mybatis工作流程 加载配置文件并初始化 首先在Mybatis启动的时候我们要去解析配置文件，包括全局配置文件和映射文件和映射器配置文件。全局配置文件里面包含了我们怎么控制Mybatis的行为，我们会把它们解析成一个Configuration对象。映射器配置文件包含了我们要对数据库下达的指令。也就是我们的SQL信息。然后一个SQL节点会被对应解析成一个MappedStatement对象存储在内存中。 接下来就是我们操作数据的接口，他在应用程序和数据库中间。 代表我们跟数据库之间的一次连接：这个这个就是SqlSession对象。我们要获得一个SqlSession对象或者说是获得一次连接会话，必须有一个会话工厂SqlSessionFactory。SqlSessionFactory里面又必须包含我们的所有的配置信息，所以我们会通过一个FactoryBuilder来创建工厂类。 接收调用的请求 接收SQL的ID和传入的参数对象 处理操作请求 根据SQL的ID查找对应的MappedStatement对象。 根据传入参数对象解析MappedStatement对象，得到最终要执行的SQL和执行传入参数。 获取数据库连接，根据得到的最终SQL语句和执行传入参数到数据库执行，并得到执行结果。 根据MappedStatement对象中的结果映射配置，对得到的执行结果进行转换处理，并得到最终的处理结果。 释放连接资源。 返回最终的处理结果 我们知道Mybatis是对JDBC的封装，也就是意味着底层一定会出现JDBC的一些核心对象，比如执行SQL的Statement，结果集ResultSet。在Mybatis里面，SqlSession只是提供给应用一个接口，还不是SQL的真正的执行对象。其实SqlSession内部是持有了一个Executor对象，用来封装对数据库的操作。在执行器Executor执行query或者update操作的时候我们创建一系列的对象，来处理参数、执行SQL、处理结果集，这里我们把它简化成一个对象StatementHandler，（但是ExecutorStatementHandler我们都操作不到，底层源码可以看到）以上这些就是Mybatis主要的工作流程。","categories":[{"name":"Mybatis","slug":"Mybatis","permalink":"https://little-follower.github.io/bit-by-bit.github.io/categories/Mybatis/"}],"tags":[{"name":"Mybatis基础","slug":"Mybatis基础","permalink":"https://little-follower.github.io/bit-by-bit.github.io/tags/Mybatis%E5%9F%BA%E7%A1%80/"}]},{"title":"hexo的基本使用","slug":"hello-world","date":"2023-10-24T06:57:06.721Z","updated":"2023-10-24T16:22:59.474Z","comments":false,"path":"2023/10/24/hello-world/","link":"","permalink":"https://little-follower.github.io/bit-by-bit.github.io/2023/10/24/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new &quot;My New Post&quot; More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[{"name":"hexo","slug":"hexo","permalink":"https://little-follower.github.io/bit-by-bit.github.io/categories/hexo/"}],"tags":[{"name":"教程","slug":"教程","permalink":"https://little-follower.github.io/bit-by-bit.github.io/tags/%E6%95%99%E7%A8%8B/"}]}],"categories":[{"name":"Mybatis","slug":"Mybatis","permalink":"https://little-follower.github.io/bit-by-bit.github.io/categories/Mybatis/"},{"name":"hexo","slug":"hexo","permalink":"https://little-follower.github.io/bit-by-bit.github.io/categories/hexo/"}],"tags":[{"name":"Mybatis基础","slug":"Mybatis基础","permalink":"https://little-follower.github.io/bit-by-bit.github.io/tags/Mybatis%E5%9F%BA%E7%A1%80/"},{"name":"教程","slug":"教程","permalink":"https://little-follower.github.io/bit-by-bit.github.io/tags/%E6%95%99%E7%A8%8B/"}]}