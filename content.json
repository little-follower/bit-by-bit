{"meta":{"title":"小跟班博客","subtitle":"记录自己的成长与不负韶华","description":"灵魂的欲望是命运的先知","author":"小跟班","url":"https://little-follower.github.io/bit-by-bit.github.io","root":"/bit-by-bit.github.io/"},"pages":[{"title":"categories","date":"2023-10-25T03:43:03.000Z","updated":"2023-10-25T03:52:13.037Z","comments":true,"path":"categories/index.html","permalink":"https://little-follower.github.io/bit-by-bit.github.io/categories/index.html","excerpt":"","text":""},{"title":"link","date":"2023-10-25T03:52:30.000Z","updated":"2023-10-25T15:36:49.258Z","comments":true,"path":"link/index.html","permalink":"https://little-follower.github.io/bit-by-bit.github.io/link/index.html","excerpt":"","text":"友链页面我会持续优化"},{"title":"tags","date":"2023-10-25T03:51:14.000Z","updated":"2023-10-25T03:51:45.418Z","comments":true,"path":"tags/index.html","permalink":"https://little-follower.github.io/bit-by-bit.github.io/tags/index.html","excerpt":"","text":""},{"title":"AI图片","date":"2023-10-25T16:15:43.000Z","updated":"2023-10-25T16:34:41.249Z","comments":true,"path":"Gallery/ai/index.html","permalink":"https://little-follower.github.io/bit-by-bit.github.io/Gallery/ai/index.html","excerpt":"","text":"[{\"url\":\"https://raw.githubusercontent.com/little-follower/backet/main/butterfly/childandCloud.jpg\",\"alt\":\"\"},{\"url\":\"https://raw.githubusercontent.com/little-follower/backet/main/butterfly/eq.jpg\",\"alt\":\"\"},{\"url\":\"https://raw.githubusercontent.com/little-follower/backet/main/butterfly/gildAndGrita.jpg\",\"alt\":\"\"},{\"url\":\"https://raw.githubusercontent.com/little-follower/backet/main/butterfly/mountain.jpg\",\"alt\":\"\"},{\"url\":\"https://raw.githubusercontent.com/little-follower/backet/main/butterfly/titleBackgroud.jpg\",\"alt\":\"\"}]"},{"title":"图库","date":"2023-10-25T16:15:43.000Z","updated":"2023-10-25T16:34:24.924Z","comments":true,"path":"Gallery/index.html","permalink":"https://little-follower.github.io/bit-by-bit.github.io/Gallery/index.html","excerpt":"","text":"壁纸 AI生成的好的图片 漫威 关于漫威的图片"}],"posts":[{"title":"Mybatis02-Mapper代理开发Dao层","slug":"Mybatis02-Mapper代理开发Dao层","date":"2023-11-08T14:01:02.000Z","updated":"2023-11-08T14:36:53.963Z","comments":false,"path":"2023/11/08/Mybatis02-Mapper代理开发Dao层/","link":"","permalink":"https://little-follower.github.io/bit-by-bit.github.io/2023/11/08/Mybatis02-Mapper%E4%BB%A3%E7%90%86%E5%BC%80%E5%8F%91Dao%E5%B1%82/","excerpt":"","text":"Mapper 代理开发原因 我们只需要写mapper接口和mapper.xml映射文件，MyBatis可以自动生成mapper接口实现类代理对象。 在编写mapper接口时需要遵循一些开发规范： mapper.java接口名跟mapper.xml映射文件名相同并且在同一个包下。 在mapper.xml映射文件中，namespace&#x3D;”mapper接口全限定名” –完全包名.mapper接口名。 mapper.java接口中的方法名和mapper.xml中statement的id值一致。 mapper.java接口中的方法输入参数类型和mapper.xml中statement的parameterType指定的类型一致。 mapper.java接口中的方法返回值类型和mapper.xml中statement的resultType指定的类型一致。 MyBatisConfig.xml配置文件中 –由于使用mapper代理方式，改为加载mapper接口！ Mapper代理开发过程创建Maven项目，添加jar包依赖123456789101112131415161718192021222324252627&lt;!--mybatis 核心包--&gt; &lt;dependency&gt; &lt;groupId&gt;org.mybatis&lt;/groupId&gt; &lt;artifactId&gt;mybatis&lt;/artifactId&gt; &lt;version&gt;3.5.12&lt;/version&gt; &lt;/dependency&gt; &lt;!--mysql驱动包--&gt; &lt;dependency&gt; &lt;groupId&gt;mysql&lt;/groupId&gt; &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt; &lt;version&gt;8.0.33&lt;/version&gt; &lt;/dependency&gt; &lt;!--junit测试包--&gt; &lt;dependency&gt; &lt;groupId&gt;junit&lt;/groupId&gt; &lt;artifactId&gt;junit&lt;/artifactId&gt; &lt;version&gt;4.13.2&lt;/version&gt; &lt;/dependency&gt; &lt;!--日志包，方便查看sql语句--&gt; &lt;dependency&gt; &lt;groupId&gt;org.slf4j&lt;/groupId&gt; &lt;artifactId&gt;slf4j-log4j12&lt;/artifactId&gt; &lt;version&gt;1.7.36&lt;/version&gt; &lt;/dependency&gt; 编写mybatisConfig.xml1234567891011121314151617181920212223242526272829&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;&lt;!DOCTYPE configuration PUBLIC &quot;-//mybatis.org//DTD Config 3.0//EN&quot; &quot;https://mybatis.org/dtd/mybatis-3-config.dtd&quot;&gt;&lt;configuration&gt; &lt;!--强制在properties中使url生效，可以改name的名字再调用中也引用此配置的name值--&gt; &lt;properties resource=&quot;jdbc.properties&quot;/&gt; &lt;!--设置别名--&gt; &lt;typeAliases&gt; &lt;package name=&quot;com.by.bit.by.pojo&quot;/&gt; &lt;/typeAliases&gt; &lt;environments default=&quot;development&quot;&gt; &lt;environment id=&quot;development&quot;&gt; &lt;transactionManager type=&quot;JDBC&quot;/&gt; &lt;dataSource type=&quot;POOLED&quot;&gt; &lt;property name=&quot;driver&quot; value=&quot;$&#123;driver&#125;&quot;/&gt; &lt;property name=&quot;url&quot; value=&quot;$&#123;url&#125;&quot;/&gt; &lt;property name=&quot;username&quot; value=&quot;$&#123;username&#125;&quot;/&gt; &lt;property name=&quot;password&quot; value=&quot;$&#123;password:root&#125;&quot;/&gt; &lt;/dataSource&gt; &lt;/environment&gt; &lt;/environments&gt; &lt;mappers&gt; &lt;package name=&quot;com.by.bit.by.mapper&quot;/&gt; &lt;/mappers&gt;&lt;/configuration&gt; PS：原来我们使用原始Dao层开发，配置mapper映射地址文件 12345678&lt;!---配置mapper映射文件--&gt;&lt;mappers&gt; &lt;mapper resource=&quot;mapper/DeptMapper.xml&quot;/&gt;&lt;/mappers&gt;&lt;!---配置mapper映射文件--&gt;&lt;mappers&gt; &lt;mapper resouce=&quot;com.by.bit.by.mapper&quot;/&gt;&lt;/mappers&gt; 现在使用mapper代理的方式配置mapper映射地址文件 123456789&lt;!---推荐方式一：使用映射器接口实现类的完全限定名--&gt; &lt;mappers&gt; &lt;package name=&quot;com.by.bit.by.mapper&quot;/&gt; &lt;/mappers&gt;&lt;!---方式二：将包内的映射器接口实现--&gt; &lt;mappers&gt; &lt;mapper class=&quot;com.by.bit.by.mapper.DeptMapper&quot;/&gt; &lt;/mappers&gt; 创建实体类Dept1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950package com.by.bit.by.pojo;public class Dept &#123; private Integer deptno; private String dname; private String loc; public Dept() &#123; &#125; public Dept(Integer deptno, String dname, String loc) &#123; this.deptno = deptno; this.dname = dname; this.loc = loc; &#125; public Integer getDeptno() &#123; return deptno; &#125; public void setDeptno(Integer deptno) &#123; this.deptno = deptno; &#125; public String getDname() &#123; return dname; &#125; public void setDname(String dname) &#123; this.dname = dname; &#125; public String getLoc() &#123; return loc; &#125; public void setLoc(String loc) &#123; this.loc = loc; &#125; @Override public String toString() &#123; return &quot;Dept&#123;&quot; + &quot;deptno=&quot; + deptno + &quot;, dname=&#x27;&quot; + dname + &#x27;\\&#x27;&#x27; + &quot;, loc=&#x27;&quot; + loc + &#x27;\\&#x27;&#x27; + &#x27;&#125;&#x27;; &#125;&#125; 编写Mapper接口123456789101112131415161718public interface DeptMapper &#123; //查询所有部门信息 List&lt;Dept&gt; selectAllDept () throws Exception; //查询某一个部门信息 Dept selectDeptByDeptno (int deptNo) throws Exception; //插入一个部门信息 int insertDept (Dept dept) throws Exception; //更新某一部门信息 int updateDept (Dept dept) throws Exception; //删除某一部门信息 int deleteDept (int deptNot) throws Exception;&#125; 编写Mapper映射文件123456789101112131415161718192021222324252627&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;&lt;!DOCTYPE mapper PUBLIC &quot;-//mybatis.org//DTD Mapper 3.0//EN&quot; &quot;https://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;&gt;&lt;mapper namespace=&quot;com.by.bit.by.mapper.DeptMapper&quot;&gt; &lt;select id=&quot;selectAllDept&quot; resultType=&quot;dept&quot;&gt; select * from dept &lt;/select&gt; &lt;select id=&quot;selectDeptByDeptno&quot; parameterType=&quot;int&quot; resultType=&quot;dept&quot;&gt; select * from dept where deptno = #&#123;id&#125; &lt;/select&gt; &lt;insert id=&quot;insertDept&quot; parameterType=&quot;dept&quot;&gt; insert into dept (deptno,dname,loc) values (#&#123;deptno&#125;,#&#123;dname&#125;,#&#123;loc&#125;) &lt;/insert&gt; &lt;update id=&quot;updateDept&quot; parameterType=&quot;dept&quot;&gt; update dept set loc = #&#123;loc&#125; where deptno = #&#123;deptno&#125; &lt;/update&gt; &lt;delete id=&quot;deleteDept&quot; parameterType=&quot;int&quot;&gt; delete from dept where deptno = #&#123;deptno&#125; &lt;/delete&gt;&lt;/mapper&gt; 单元测试1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374import com.by.bit.by.mapper.DeptMapper;import com.by.bit.by.pojo.Dept;import org.apache.ibatis.io.Resources;import org.apache.ibatis.session.SqlSession;import org.apache.ibatis.session.SqlSessionFactory;import org.apache.ibatis.session.SqlSessionFactoryBuilder;import org.junit.Before;import org.junit.Test;import java.io.InputStream;import java.util.List;/** * @author: chengqing Zhang * @description: 使用Mapper代理的接口操作mybatis，单元测试类 */public class MyBatis02_02Test &#123; private SqlSessionFactory factory; @Before public void initFactory() throws Exception &#123; InputStream io = Resources.getResourceAsStream(&quot;mybatisConfig.xml&quot;); SqlSessionFactoryBuilder sqlSessionFactoryBuilder = new SqlSessionFactoryBuilder(); factory = sqlSessionFactoryBuilder.build(io); &#125; @Test public void selectAllDept() throws Exception &#123; SqlSession session = factory.openSession(); DeptMapper mapper = session.getMapper(DeptMapper.class); List&lt;Dept&gt; depts = mapper.selectAllDept(); for (int i = 0; i &lt; depts.size(); i++) &#123; System.out.println(&quot;selectAllDept:&quot;+i+depts.get(i)); &#125; &#125; @Test public void selectDeptByDeptno() throws Exception &#123; SqlSession session = factory.openSession(); DeptMapper mapper = session.getMapper(DeptMapper.class); Dept dept = mapper.selectDeptByDeptno(40); System.out.println(&quot;selectDeptByDeptno:&quot;+dept); &#125; @Test public void insertDept() throws Exception &#123; SqlSession session = factory.openSession(); DeptMapper mapper = session.getMapper(DeptMapper.class); int i = mapper.insertDept(new Dept(55, &quot;20231107&quot;, &quot;上海&quot;)); System.out.println(i==1?&quot;插入成功！&quot;:&quot;插入失败！&quot;); &#125; @Test public void updateDept() throws Exception &#123; SqlSession session = factory.openSession(); DeptMapper mapper = session.getMapper(DeptMapper.class); Dept dept = new Dept(); dept.setDeptno(55); dept.setLoc(&quot;北京&quot;); int i = mapper.updateDept(dept); System.out.println(i==1?&quot;更新成功！&quot;:&quot;更新失败！&quot;); &#125; @Test public void deleteDept() throws Exception &#123; SqlSession session = factory.openSession(); DeptMapper mapper = session.getMapper(DeptMapper.class); int i = mapper.deleteDept(41); System.out.println(i==1?&quot;删除成功！&quot;:&quot;删除失败！&quot;); &#125;&#125; 测试结果selectAllDept 1234567891011121314DEBUG [main] - ==&gt; Preparing: select * from deptDEBUG [main] - ==&gt; Parameters: TRACE [main] - &lt;== Columns: deptno, dname, locTRACE [main] - &lt;== Row: 10, 开发部, 沈阳TRACE [main] - &lt;== Row: 20, 实施部, 长春TRACE [main] - &lt;== Row: 30, 运维部, 北京TRACE [main] - &lt;== Row: 41, 运营部, 北京TRACE [main] - &lt;== Row: 42, 财务部, 上海DEBUG [main] - &lt;== Total: 5selectAllDept: 0Dept&#123;deptno=10, dname=&#x27;开发部&#x27;, loc=&#x27;沈阳&#x27;&#125;selectAllDept: 1Dept&#123;deptno=20, dname=&#x27;实施部&#x27;, loc=&#x27;长春&#x27;&#125;selectAllDept: 2Dept&#123;deptno=30, dname=&#x27;运维部&#x27;, loc=&#x27;北京&#x27;&#125;selectAllDept: 3Dept&#123;deptno=41, dname=&#x27;运营部&#x27;, loc=&#x27;北京&#x27;&#125;selectAllDept: 4Dept&#123;deptno=42, dname=&#x27;财务部&#x27;, loc=&#x27;上海&#x27;&#125; selectDeptByDeptno 123456DEBUG [main] - ==&gt; Preparing: select * from dept where deptno = ?DEBUG [main] - ==&gt; Parameters: 10(Integer)TRACE [main] - &lt;== Columns: deptno, dname, locTRACE [main] - &lt;== Row: 10, 开发部, 沈阳DEBUG [main] - &lt;== Total: 1selectDeptByDeptno: Dept&#123;deptno=10, dname=&#x27;开发部&#x27;, loc=&#x27;沈阳&#x27;&#125; insertDept 1234DEBUG [main] - ==&gt; Preparing: insert into dept (deptno,dname,loc) values (?,?,?)DEBUG [main] - ==&gt; Parameters: 50(Integer), 研发部(String), 上海(String)DEBUG [main] - &lt;== Updates: 1新增成功！ updateDept 1234DEBUG [main] - ==&gt; Preparing: insert into dept (deptno,dname,loc) values (?,?,?)DEBUG [main] - ==&gt; Parameters: 50(Integer), 研发部(String), 上海(String)DEBUG [main] - &lt;== Updates: 1新增成功！ deleteDept 1234DEBUG [main] - ==&gt; Preparing: delete from dept where deptno = ?DEBUG [main] - ==&gt; Parameters: 50(Integer)DEBUG [main] - &lt;== Updates: 1删除成功！ ​ PS：本小结的源代码请点击","categories":[{"name":"Mybatis","slug":"Mybatis","permalink":"https://little-follower.github.io/bit-by-bit.github.io/categories/Mybatis/"}],"tags":[{"name":"Mybatis基础","slug":"Mybatis基础","permalink":"https://little-follower.github.io/bit-by-bit.github.io/tags/Mybatis%E5%9F%BA%E7%A1%80/"}]},{"title":"Mybatis基础02-原始模式开发dao层","slug":"Mybatis02-原始模式开发dao层","date":"2023-11-07T09:15:42.000Z","updated":"2023-11-07T09:35:01.578Z","comments":false,"path":"2023/11/07/Mybatis02-原始模式开发dao层/","link":"","permalink":"https://little-follower.github.io/bit-by-bit.github.io/2023/11/07/Mybatis02-%E5%8E%9F%E5%A7%8B%E6%A8%A1%E5%BC%8F%E5%BC%80%E5%8F%91dao%E5%B1%82/","excerpt":"","text":"MyBatis基础02-原始模式开发Dao层创建Maven项目，添加jar包依赖123456789101112131415161718192021222324252627&lt;!--mybatis 核心包--&gt; &lt;dependency&gt; &lt;groupId&gt;org.mybatis&lt;/groupId&gt; &lt;artifactId&gt;mybatis&lt;/artifactId&gt; &lt;version&gt;3.5.12&lt;/version&gt; &lt;/dependency&gt; &lt;!--mysql驱动包--&gt; &lt;dependency&gt; &lt;groupId&gt;mysql&lt;/groupId&gt; &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt; &lt;version&gt;8.0.33&lt;/version&gt; &lt;/dependency&gt; &lt;!--junit测试包--&gt; &lt;dependency&gt; &lt;groupId&gt;junit&lt;/groupId&gt; &lt;artifactId&gt;junit&lt;/artifactId&gt; &lt;version&gt;4.13.2&lt;/version&gt; &lt;/dependency&gt; &lt;!--日志包，方便查看sql语句--&gt; &lt;dependency&gt; &lt;groupId&gt;org.slf4j&lt;/groupId&gt; &lt;artifactId&gt;slf4j-log4j12&lt;/artifactId&gt; &lt;version&gt;1.7.36&lt;/version&gt; &lt;/dependency&gt; 编写mybatisConfig.xml1234567891011121314151617181920212223242526272829&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;&lt;!DOCTYPE configuration PUBLIC &quot;-//mybatis.org//DTD Config 3.0//EN&quot; &quot;https://mybatis.org/dtd/mybatis-3-config.dtd&quot;&gt;&lt;configuration&gt; &lt;!--强制在properties中使url生效，可以改name的名字再调用中也引用此配置的name值--&gt; &lt;properties resource=&quot;jdbc.properties&quot;/&gt; &lt;!--设置别名--&gt; &lt;typeAliases&gt; &lt;package name=&quot;com.by.bit.by.pojo&quot;/&gt; &lt;/typeAliases&gt; &lt;environments default=&quot;development&quot;&gt; &lt;environment id=&quot;development&quot;&gt; &lt;transactionManager type=&quot;JDBC&quot;/&gt; &lt;dataSource type=&quot;POOLED&quot;&gt; &lt;property name=&quot;driver&quot; value=&quot;$&#123;driver&#125;&quot;/&gt; &lt;property name=&quot;url&quot; value=&quot;$&#123;url&#125;&quot;/&gt; &lt;property name=&quot;username&quot; value=&quot;$&#123;username&#125;&quot;/&gt; &lt;property name=&quot;password&quot; value=&quot;$&#123;password:root&#125;&quot;/&gt; &lt;/dataSource&gt; &lt;/environment&gt; &lt;/environments&gt; &lt;mappers&gt; &lt;mapper resource=&quot;mapper/DeptMapper.xml&quot;/&gt; &lt;/mappers&gt;&lt;/configuration&gt; 创建实体类Dept1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950package com.by.bit.by.pojo;public class Dept &#123; private Integer deptno; private String dname; private String loc; public Dept() &#123; &#125; public Dept(Integer deptno, String dname, String loc) &#123; this.deptno = deptno; this.dname = dname; this.loc = loc; &#125; public Integer getDeptno() &#123; return deptno; &#125; public void setDeptno(Integer deptno) &#123; this.deptno = deptno; &#125; public String getDname() &#123; return dname; &#125; public void setDname(String dname) &#123; this.dname = dname; &#125; public String getLoc() &#123; return loc; &#125; public void setLoc(String loc) &#123; this.loc = loc; &#125; @Override public String toString() &#123; return &quot;Dept&#123;&quot; + &quot;deptno=&quot; + deptno + &quot;, dname=&#x27;&quot; + dname + &#x27;\\&#x27;&#x27; + &quot;, loc=&#x27;&quot; + loc + &#x27;\\&#x27;&#x27; + &#x27;&#125;&#x27;; &#125;&#125; 编写Dao接口12345678910111213141516171819202122232425package com.by.bit.by.dao;import com.by.bit.by.pojo.Dept;import java.util.List;public interface DeptDao &#123; //查询所有部门信息 List&lt;Dept&gt; selectAllDept () throws Exception; //查询某一个部门信息 Dept selectDeptByDeptno (int deptNo) throws Exception; //插入一个部门信息 int insertDept (Dept dept) throws Exception; //更新某一部门信息 int updateDept (Dept dept) throws Exception; //删除某一部门信息 int deleteDept (int deptNot) throws Exception;&#125; 编写Mapper映射文件123456789101112131415161718192021222324252627&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;&lt;!DOCTYPE mapper PUBLIC &quot;-//mybatis.org//DTD Mapper 3.0//EN&quot; &quot;https://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;&gt;&lt;mapper namespace=&quot;org.mybatis.example.BlogMapper&quot;&gt; &lt;select id=&quot;selectAllDept&quot; resultType=&quot;dept&quot;&gt; select * from dept &lt;/select&gt; &lt;select id=&quot;selectDeptByDeptno&quot; parameterType=&quot;int&quot; resultType=&quot;dept&quot;&gt; select * from dept where deptno = #&#123;id&#125; &lt;/select&gt; &lt;insert id=&quot;insertDept&quot; parameterType=&quot;dept&quot;&gt; insert into dept (deptno,dname,loc) values (#&#123;deptno&#125;,#&#123;dname&#125;,#&#123;loc&#125;) &lt;/insert&gt; &lt;update id=&quot;updateDept&quot; parameterType=&quot;dept&quot;&gt; update dept set loc = #&#123;loc&#125; where deptno = #&#123;deptno&#125; &lt;/update&gt; &lt;delete id=&quot;deleteDept&quot; parameterType=&quot;int&quot;&gt; delete from dept where deptno = #&#123;deptno&#125; &lt;/delete&gt;&lt;/mapper&gt; 编写Dao接口实现类1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586public class DeptDaoImpl implements DeptDao &#123; public SqlSessionFactory factory; /** * 构造的方式传入SqlSessionFactory * * @param factory mybatis 工厂类 */ public DeptDaoImpl(SqlSessionFactory factory) &#123; this.factory = factory; &#125; /** * 查询所有部门信息 * * @return List&lt;Dept&gt; * @throws Exception 异常 */ @Override public List&lt;Dept&gt; selectAllDept() throws Exception &#123; SqlSession session = factory.openSession(); List&lt;Dept&gt; deptList = session.selectList(&quot;selectAllDept&quot;); session.close(); return deptList; &#125; /** * 查询某一个部门信息 * * @return List&lt;Dept&gt; * @throws Exception 异常 */ @Override public Dept selectDeptByDeptno(int deptNo) throws Exception &#123; SqlSession session = factory.openSession(); Dept dept = session.selectOne(&quot;selectDeptByDeptno&quot;, deptNo); session.close(); return dept; &#125; /** * 插入一个部门信息 * * @return List&lt;Dept&gt; * @throws Exception 异常 */ @Override public int insertDept(Dept dept) throws Exception &#123; SqlSession session = factory.openSession(); int i = session.insert(&quot;insertDept&quot;, dept); session.commit(); session.close(); return i; &#125; /** * 更新某一部门信息 * * @return List&lt;Dept&gt; * @throws Exception 异常 */ @Override public int updateDept(Dept dept) throws Exception &#123; SqlSession session = factory.openSession(); int update = session.update(&quot;updateDept&quot;, dept); session.commit(); session.close(); return update; &#125; /** * 删除某一部门信息 * * @return List&lt;Dept&gt; * @throws Exception 异常 */ @Override public int deleteDept(int deptNot) throws Exception &#123; SqlSession session = factory.openSession(); int deleteDept = session.delete(&quot;deleteDept&quot;, deptNot); session.commit(); session.close(); return deleteDept; &#125;&#125; 单元测试1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253public class MyBatis02Test &#123; private SqlSessionFactory factory; @Before public void initFactory() throws Exception &#123; InputStream io = Resources.getResourceAsStream(&quot;mybatisConfig.xml&quot;); SqlSessionFactoryBuilder sqlSessionFactoryBuilder = new SqlSessionFactoryBuilder(); factory = sqlSessionFactoryBuilder.build(io); &#125; @Test public void selectAllDept() throws Exception &#123; DeptDao deptDao = new DeptDaoImpl(factory); List&lt;Dept&gt; depts = deptDao.selectAllDept(); for (int i = 0; i &lt; depts.size(); i++) &#123; System.out.println(&quot;selectAllDept: &quot;+i+depts.get(i)); &#125; &#125; @Test public void selectDeptByDeptno() throws Exception &#123; DeptDao deptDao = new DeptDaoImpl(factory); Dept dept = deptDao.selectDeptByDeptno(10); System.out.println(&quot;selectDeptByDeptno: &quot;+dept); &#125; @Test public void insertDept() throws Exception &#123; DeptDao deptDao = new DeptDaoImpl(factory); Dept dept = new Dept(50,&quot;研发部&quot;,&quot;上海&quot;); int i = deptDao.insertDept(dept); System.out.println(i==1 ?&quot;新增成功！&quot;:&quot;新增失败！&quot;); &#125; @Test public void updateDept() throws Exception &#123; DeptDao deptDao = new DeptDaoImpl(factory); Dept dept = new Dept(); dept.setDeptno(50); dept.setLoc(&quot;北京&quot;); int i = deptDao.updateDept(dept); System.out.println(i==1?&quot;修改成功！&quot;:&quot;修改失败！&quot;); &#125; @Test public void deleteDept() throws Exception &#123; DeptDao deptDao = new DeptDaoImpl(factory); int i = deptDao.deleteDept(50); System.out.println(i==1?&quot;删除成功！&quot;:&quot;删除失败！&quot;); &#125;&#125; 测试结果selectAllDept 1234567891011121314DEBUG [main] - ==&gt; Preparing: select * from deptDEBUG [main] - ==&gt; Parameters: TRACE [main] - &lt;== Columns: deptno, dname, locTRACE [main] - &lt;== Row: 10, 开发部, 沈阳TRACE [main] - &lt;== Row: 20, 实施部, 长春TRACE [main] - &lt;== Row: 30, 运维部, 北京TRACE [main] - &lt;== Row: 41, 运营部, 北京TRACE [main] - &lt;== Row: 42, 财务部, 上海DEBUG [main] - &lt;== Total: 5selectAllDept: 0Dept&#123;deptno=10, dname=&#x27;开发部&#x27;, loc=&#x27;沈阳&#x27;&#125;selectAllDept: 1Dept&#123;deptno=20, dname=&#x27;实施部&#x27;, loc=&#x27;长春&#x27;&#125;selectAllDept: 2Dept&#123;deptno=30, dname=&#x27;运维部&#x27;, loc=&#x27;北京&#x27;&#125;selectAllDept: 3Dept&#123;deptno=41, dname=&#x27;运营部&#x27;, loc=&#x27;北京&#x27;&#125;selectAllDept: 4Dept&#123;deptno=42, dname=&#x27;财务部&#x27;, loc=&#x27;上海&#x27;&#125; selectDeptByDeptno 123456DEBUG [main] - ==&gt; Preparing: select * from dept where deptno = ?DEBUG [main] - ==&gt; Parameters: 10(Integer)TRACE [main] - &lt;== Columns: deptno, dname, locTRACE [main] - &lt;== Row: 10, 开发部, 沈阳DEBUG [main] - &lt;== Total: 1selectDeptByDeptno: Dept&#123;deptno=10, dname=&#x27;开发部&#x27;, loc=&#x27;沈阳&#x27;&#125; insertDept 1234DEBUG [main] - ==&gt; Preparing: insert into dept (deptno,dname,loc) values (?,?,?)DEBUG [main] - ==&gt; Parameters: 50(Integer), 研发部(String), 上海(String)DEBUG [main] - &lt;== Updates: 1新增成功！ updateDept 1234DEBUG [main] - ==&gt; Preparing: insert into dept (deptno,dname,loc) values (?,?,?)DEBUG [main] - ==&gt; Parameters: 50(Integer), 研发部(String), 上海(String)DEBUG [main] - &lt;== Updates: 1新增成功！ deleteDept 1234DEBUG [main] - ==&gt; Preparing: delete from dept where deptno = ?DEBUG [main] - ==&gt; Parameters: 50(Integer)DEBUG [main] - &lt;== Updates: 1删除成功！ 总结原始Dao开发的缺点 dao&#x2F;接口实现类方法中存在大量模板方法，设想能否将这些代码提取出来，大大减轻程序员的工作量。 调用sqlSession的方法时，将statement的id硬编码了。 调用sqlSession的方法时，传入的变量和接收的返回值使用了泛型，这样即使变量类型传入或者接收错误，在编译阶段也不报错，以利于程序员开发。: ​ PS：本小结的源代码请点击mybatis02-01","categories":[{"name":"Mybatis","slug":"Mybatis","permalink":"https://little-follower.github.io/bit-by-bit.github.io/categories/Mybatis/"}],"tags":[{"name":"Mybatis基础","slug":"Mybatis基础","permalink":"https://little-follower.github.io/bit-by-bit.github.io/tags/Mybatis%E5%9F%BA%E7%A1%80/"}]},{"title":"Mybatis基础01-XML映射器","slug":"Mybatis基础01-XML映射器","date":"2023-11-07T02:09:32.000Z","updated":"2023-11-07T06:29:39.579Z","comments":false,"path":"2023/11/07/Mybatis基础01-XML映射器/","link":"","permalink":"https://little-follower.github.io/bit-by-bit.github.io/2023/11/07/Mybatis%E5%9F%BA%E7%A1%8001-XML%E6%98%A0%E5%B0%84%E5%99%A8/","excerpt":"","text":"XML 映射器 Mapper.xml映射文件讲解：MyBatis的真正强大在于它的语句映射，这是它的魔力所在。由于它的异常强大，映射器的XML文件就显得相对简单。如果拿它跟具有相同的JBDC代码进行对比，你会立即发现省掉了将近95%的代码。MyBatis致力于减少使用成本，让用户能更专注于SQL代码。 ​ SQL映射文件只有很少的几个顶级元素（按照应被定义的顺序列出）： cache – 该命名空间的缓存配置。 cache-ref – 引用其它命名空间的缓存配置。 resultMap – 描述如何从数据库结果集中加载对象，是最复杂也是最强大的元素。 parameterMap – 老式风格的参数映射。此元素已被废弃，并可能在将来被移除！请使用行内参数映射。文档中不会介绍此元素。 sql – 可被其它语句引用的可重用语句块。 insert – 映射插入语句。 update – 映射更新语句。 delete – 映射删除语句。 select – 映射查询语句。 select 查询语句是MyBatis中最常用的元素之一­—-光能把数据库存到数据库中价值不大，还要能重新取出来才有用，多数应用也都是查询比修改更要频繁。MyBatis的基本原则之一是：在每个插入、更新或删除操作之间，通常会执行多个查询操作。因此，MyBatis在查询和结果映射做了相当多的改进。一个简单查询的select元素是非常简单的。比如： 123&lt;select id=&quot;selectDeptByDeptno&quot; parameterType=&quot;int&quot; resultType=&quot;dept&quot;&gt; select * from dept where deptno = #&#123;id&#125;&lt;/select&gt; 通过select执行数据库查询 id：表示映射文件中的sql。将sql语句封装到mappedStatement对象中，所以将id成为statement的id，parameterType:指定输入参数的类型，这里指定int型 #{}表示一个占位符号。#{id}：其中的id表示接收输入的参数，参数名称是id，如果输入参数是简单类型，#{}中的参数名可以任意，可以value或者其他名称resultType：指定sql输出结果的所映射的java对象类型，select指定resultType表示将单条记录映射成的java对象&#96; 属性 描述 id 在命名空间中唯一的标识符，可以被用来引用这条语句。 parameterType 将会传入这条语句的参数的类全限定名或别名。这个属性是可选的，因为 MyBatis 可以根据语句中实际传入的参数计算出应该使用的类型处理器（TypeHandler），默认值为未设置（unset）。 parameterMap 用于引用外部 parameterMap 的属性，目前已被废弃。请使用行内参数映射和 parameterType 属性。 resultType 期望从这条语句中返回结果的类全限定名或别名。 注意，如果返回的是集合，那应该设置为集合包含的类型，而不是集合本身的类型。 resultType 和 resultMap 之间只能同时使用一个。 resultMap 对外部 resultMap 的命名引用。结果映射是 MyBatis 最强大的特性，如果你对其理解透彻，许多复杂的映射问题都能迎刃而解。 resultType 和 resultMap 之间只能同时使用一个。 执行的测试代码： 12345678910111213141516171819private SqlSessionFactory sqlSessionFactory; @Before public void before () throws Exception&#123; InputStream io = Resources.getResourceAsStream(&quot;mybatisConfig.xml&quot;); // 2.获得session对象，接收对象 SqlSessionFactoryBuilder sqlSessionFactoryBuilder = new SqlSessionFactoryBuilder(); sqlSessionFactory = sqlSessionFactoryBuilder.build(io,&quot;development123&quot;); &#125; // select 查询 XML映射器 @Test public void selectDeptByDeptNo () throws Exception&#123; SqlSession session = sqlSessionFactory.openSession(); Dept dept = session.selectOne(&quot;selectDeptByDeptno&quot;,10); System.out.println(dept); session.close(); &#125; 执行结果： 123456DEBUG [main] - ==&gt; Preparing: select * from dept where deptno = ?DEBUG [main] - ==&gt; Parameters: 10(Integer)TRACE [main] - &lt;== Columns: deptno, dname, locTRACE [main] - &lt;== Row: 10, 开发部, 沈阳DEBUG [main] - &lt;== Total: 1Dept&#123;deptno=10, dname=&#x27;开发部&#x27;, loc=&#x27;沈阳&#x27;&#125; PS ： parameterType后的类型可以是基本类型int、String、HashMap和java自定义类型。 占位符号和名字： 【占位符号】：#{ } ，${ }区别在于，#{ }是预编译处理，${ }是字符串替换。MyBatis在处理#{ }时，会将sql中的#{ }替换为?号，调用PreparedStatement的set方法来赋值；MyBatis在处理${ }时，把${ }替换成变量的值。使用#{ }可以有效的防止SQL注入，提高系统安全性。但是表名用参数传递进来的时候，只能使用$ { } &#x3D;&#x3D;eg&#x3D;&#x3D; 输出参数是开发部 #{ } —–”开发部” ${ } —–开发部 【名字】：如果是简单类型，参数名可以任意。如果是简单类型，参数名可以任意。但是如果是pojo类型，参数名必须是pojo中的属性名。 insert简单添加语句 123&lt;insert id=&quot;insertDept&quot; parameterType=&quot;dept&quot;&gt; insert into dept (deptno,dname,loc) values (#&#123;deptno&#125;,#&#123;dname&#125;,#&#123;loc&#125;)&lt;/insert&gt; 进行简单的测试 1234567891011@Testpublic void insertDept() &#123; SqlSession session = sqlSessionFactory.openSession(); Dept dept = new Dept(40,&quot;数字化支持部&quot;,&quot;上海&quot;); int insert = session.insert(&quot;insertDept&quot;, dept); System.out.println(&quot;输出插入的影响行数&quot;+insert); // 插入时必须要进行手动提交 session.commit(); // 关闭会话 session.close();&#125; 执行结果： 1234DEBUG [main] - ==&gt; Preparing: insert into dept (deptno,dname,loc) values (?,?,?)DEBUG [main] - ==&gt; Parameters: 40(Integer), 数字化支持部(String), 上海(String)DEBUG [main] - &lt;== Updates: 1输出插入的影响行数1 insert的常用属性，详情参考文档 id 在命名空间中唯一的标识符，可以被用来引用这条语句。 parameterType 将会传入这条语句的参数的类全限定名或别名。这个属性是可选的，因为 MyBatis 可以根据语句中实际传入的参数计算出应该使用的类型处理器（TypeHandler），默认值为未设置（unset）。 parameterMap 用于引用外部 parameterMap 的属性，目前已被废弃。请使用行内参数映射和 parameterType 属性。 主键自增语句 如前所述，插入语句的配置规则更加丰富，在插入语句里面有一些额外的属性和子元素用来处理主键的生成，并提供了多种生成方式。首先，如果你的数据库支持自动生成主键的字段（比如MySQL和SQL Server）,那么你可以设置useGeneratedKeys=true,然后在把keyProperty设置为目标属性就OK了。例如，上面的dept表已经在id列上使用了自动生成，那么语句可以修改为 123&lt;insert id=&quot;insertDeptUseGeneratedKeys&quot; parameterType=&quot;dept&quot; useGeneratedKeys=&quot;true&quot; keyProperty=&quot;deptno&quot;&gt; insert into dept (dname,loc) values (#&#123;dname&#125;,#&#123;loc&#125;)&lt;/insert&gt; 测试代码 1234567891011121314// insert 主键自增语句 XML映射器 @Test public void insertDeptUseGeneratedKeys() &#123; SqlSession session = sqlSessionFactory.openSession(); Dept dept = new Dept(); dept.setDname(&quot;运营部&quot;); dept.setLoc(&quot;北京&quot;); int insert = session.insert(&quot;insertDept&quot;, dept); // 插入时必须要进行手动提交 session.commit(); // 关闭会话 session.close(); System.out.println(&quot;insertDeptUseGeneratedKeys输出插入的影响行数&quot;+insert); &#125; 执行结果 1234DEBUG [main] - ==&gt; Preparing: insert into dept (deptno,dname,loc) values (?,?,?)DEBUG [main] - ==&gt; Parameters: null, 运营部(String), 北京(String)DEBUG [main] - &lt;== Updates: 1insertDeptUseGeneratedKeys输出插入的影响行数1 数据库截图 update,delete语句 简单的更新语句 123&lt;update id=&quot;updateDept&quot; parameterType=&quot;dept&quot;&gt; update dept set loc = #&#123;loc&#125; where deptno = #&#123;deptno&#125;&lt;/update&gt; 测试代码 123456789101112// update 简单语句 XML映射 @Test public void updateDept() &#123; SqlSession session = sqlSessionFactory.openSession(); Dept dept = new Dept(); dept.setDeptno(40); dept.setLoc(&quot;北京&quot;); int updateDept = session.update(&quot;updateDept&quot;, dept); session.commit(); session.close(); System.out.println(updateDept==1?&quot;修改成功！&quot;:&quot;修改失败！&quot;); &#125; 执行结果 1234DEBUG [main] - ==&gt; Preparing: update dept set loc = ? where deptno = ?DEBUG [main] - ==&gt; Parameters: 北京(String), 40(Integer)DEBUG [main] - &lt;== Updates: 1修改成功！ 简单的删除语句 123&lt;delete id=&quot;deleteDept&quot; parameterType=&quot;int&quot;&gt; delete from dept where deptno = #&#123;deptno&#125; &lt;/delete&gt; 测试代码 123456789// delete 简单语句 XML映射 @Test public void deleteDept() &#123; SqlSession session = sqlSessionFactory.openSession(); int deleteDept = session.delete(&quot;deleteDept&quot;, 40); session.commit(); session.close(); System.out.println(deleteDept==1?&quot;删除成功！&quot;:&quot;删除失败！&quot;); &#125; 执行结果 1234DEBUG [main] - ==&gt; Preparing: delete from dept where deptno = ?DEBUG [main] - ==&gt; Parameters: 40(Integer)DEBUG [main] - &lt;== Updates: 1删除成功！ PS：详细的关于更多的操作，可以参考文档","categories":[{"name":"Mybatis","slug":"Mybatis","permalink":"https://little-follower.github.io/bit-by-bit.github.io/categories/Mybatis/"}],"tags":[{"name":"Mybatis基础","slug":"Mybatis基础","permalink":"https://little-follower.github.io/bit-by-bit.github.io/tags/Mybatis%E5%9F%BA%E7%A1%80/"}]},{"title":"Mybatis基础01-核心配置文件二","slug":"Mybatis基础01-核心配置文件二","date":"2023-11-03T08:41:14.000Z","updated":"2023-11-06T10:28:26.928Z","comments":false,"path":"2023/11/03/Mybatis基础01-核心配置文件二/","link":"","permalink":"https://little-follower.github.io/bit-by-bit.github.io/2023/11/03/Mybatis%E5%9F%BA%E7%A1%8001-%E6%A0%B8%E5%BF%83%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E4%BA%8C/","excerpt":"","text":"Mybatis基础01-核心配置文件二settings 设置 Mybatis框架在运行时可以调整一些运行参数，比如：开启二级缓存，开启延迟加载等。（PS:因为基础篇我们暂时不进行详细说明，所以后面我们进行详细的介绍, 想知道的可以点击MyBatis文档 ） 介绍后面几个后面会用到的属性： cacheEnabled：开启二级缓存 1&lt;setting name=&quot;cacheEnabled&quot; value=&quot;true&quot;/&gt; lazyLoadingEnabled: 开启延迟加载&#x2F;懒加载，“针对级联使用的” 1&lt;setting name=&quot;lazyLoadingEnabled&quot; value=&quot;true&quot;/&gt; aggressiveLazyLoading：3.4.1（包含）前为true，之后为false，它是控制具有懒加载特性的对象的属性的加载情况的。true表示如果对具有懒加载特性的对象的任意调用会导致这个对象的完整加载，false表示每种属性按照需要加载。 1&lt;setting name=&quot;aggressiveLazyLoading&quot; value=&quot;true&quot;/&gt; typeAliases 类型别名 类型别名可为Java类型设置一个缩写名字，它用于XML配置，意在降低冗余的全限定类名书写。eg：在如下mapper映射文件中，resultType的值为全限定类名： 123&lt;select id=&quot;selectAllDept&quot; resultType=&quot;com.bit.by.bit.pojos.Dept&quot;&gt; select * from dept&lt;/select&gt; 方式一 alias 别名，type类型；当这样设置完，dept可以用在使用com.bit.by.bit.pojos.Dept的地方。一般多用于mapper.xml中 123&lt;typeAliases&gt; &lt;typeAlias alias=&quot;dept&quot; type=&quot;com.bit.by.bit.pojos.Dept&quot;/&gt;&lt;/typeAliases&gt; 推荐使用 也可以在直接设置一个包名，MyBatis会在包名下面搜索需要的Java Bean，那别名是什么呢？如果实体类中没有设置@Alias(“dept”)该注解，那么该实体类的别名就是首字母小写的名字；如果实体类中有@Alias(“dept”)该注解，那么该实体类的别名就是注解中设置的名字。 123&lt;typeAliases&gt; &lt;package name=&quot;com.bit.by.bit.pojos&quot;/&gt;&lt;/typeAliases&gt; typeHandlers 类型处理器 MyBatis 在设置预处理语句（PreparedStatement）中的参数或从结果集中取出一个值时， 都会用类型处理器将获取到的值以合适的方式转换成 Java 类型。下表描述了一些默认的类型处理器。提示 从 3.4.5 开始，MyBatis 默认支持 JSR-310（日期和时间 API） 。通常情况下，MyBatis提供的类型处理器满足日常的需求，不需要自定义。 objectFactory 对象工厂 每次MyBatis创建结果对象的新实例时，它都会使用一个对象工厂（ObjectFactory）实例来完成实例化工作。默认的对象工厂需要做的仅仅是实例化目标类，要么通过默认无参构造方法，要么通过存在的参数映射来调用带有参数的构造方法。如果想覆盖对象工厂的默认行为，可以通过创建自己的对象工厂来实现。但是通常我们不进行自定义，直接使用MyBatis提供的对象工厂。 plugins 插件 MyBatis 允许你在映射执行过程中的某一点进行拦截调用。但很可能会破坏MyBatis的核心模块。这些都是更底层的类和方法，所以使用插件的时候要特别当心。这可能会极大影响MyBatis的行为，务请慎之又慎。 environment 环境配置 MyBatis 可以配置成适应多种环境，这种机制有助于将 SQL 映射应用于多种数据库之中， 现实情况下有多种理由需要这么做。例如，开发、测试和生产环境需要有不同的配置；或者想在具有相同 Schema 的多个生产数据库中使用相同的 SQL 映射。还有许多类似的使用场景。 不过要记住：尽管可以配置多个环境，但每个 SqlSessionFactory 实例只能选择一种环境。 所以，如果你想连接两个数据库，就需要创建两个 SqlSessionFactory 实例，每个数据库对应一个。而如果是三个数据库，就需要三个实例，依此类推，记起来很简单： 每个数据库对应一个 SqlSessionFactory 实例 为了指定创建哪种环境，只要将它作为可选的参数传递给 SqlSessionFactoryBuilder 即可。可以接受环境配置的两个方法签名是： 12345SqlSessionFactory factory = new SqlSessionFactoryBuilder().build(reader, environment);SqlSessionFactory factory = new SqlSessionFactoryBuilder().build(reader, environment, properties);// reader: 读取的全局xml配置文件的输入流，配置信息都在这个文件中；// environment: 指定的此SqlSessionFactory的数据库环境，默认为default；// properties: 设置一些动态化常量，会和XML中的properties中常量合在一起； environment元素定义了如何配置环境 1234567891011121314151617181920&lt;environments default=&quot;development&quot;&gt; &lt;environment id=&quot;development&quot;&gt; &lt;transactionManager type=&quot;JDBC&quot;/&gt; &lt;dataSource type=&quot;POOLED&quot;&gt; &lt;property name=&quot;driver&quot; value=&quot;$&#123;driver&#125;&quot;/&gt; &lt;property name=&quot;url&quot; value=&quot;$&#123;url&#125;&quot;/&gt; &lt;property name=&quot;username&quot; value=&quot;$&#123;username&#125;&quot;/&gt; &lt;property name=&quot;password&quot; value=&quot;$&#123;password:root&#125;&quot;/&gt; &lt;/dataSource&gt; &lt;/environment&gt; &lt;environment id=&quot;development123&quot;&gt; &lt;transactionManager type=&quot;JDBC&quot;/&gt; &lt;dataSource type=&quot;POOLED&quot;&gt; &lt;property name=&quot;driver&quot; value=&quot;$&#123;driver&#125;&quot;/&gt; &lt;property name=&quot;url&quot; value=&quot;$&#123;url3&#125;&quot;/&gt; &lt;property name=&quot;username&quot; value=&quot;$&#123;username&#125;&quot;/&gt; &lt;property name=&quot;password&quot; value=&quot;$&#123;password:root&#125;&quot;/&gt; &lt;/dataSource&gt; &lt;/environment&gt; &lt;/environments&gt; 注意一些关键点: 默认使用的环境 ID（比如：default&#x3D;”development”）。 每个 environment 元素定义的环境 ID（比如：id&#x3D;”development”）。 事务管理器的配置（比如：type&#x3D;”JDBC”）。 数据源的配置（比如：type&#x3D;”POOLED”）。 默认环境和环境 ID 顾名思义。 环境可以随意命名，但务必保证默认的环境 ID 要匹配其中一个环境 ID 事务管理器（transactionManager） 在 MyBatis 中有两种类型的事务管理器（也就是 type&#x3D;”[JDBC|MANAGED]”）： JDBC – 这个配置直接使用了 JDBC 的提交和回滚功能，它依赖从数据源获得的连接来管理事务作用域。默认情况下，为了与某些驱动程序兼容，它在关闭连接时启用自动提交。然而，对于某些驱动程序来说，启用自动提交不仅是不必要的，而且是一个代价高昂的操作。因此，从 3.5.10 版本开始，你可以通过将 “skipSetAutoCommitOnClose” 属性设置为 “true” 来跳过这个步骤。例如： 123&lt;transactionManager type=&quot;JDBC&quot;&gt; &lt;property name=&quot;skipSetAutoCommitOnClose&quot; value=&quot;true&quot;/&gt;&lt;/transactionManager&gt; MANAGED – 这个配置几乎没做什么。它从不提交或回滚一个连接，而是让容器来管理事务的整个生命周期（比如 JEE 应用服务器的上下文）。 默认情况下它会关闭连接。然而一些容器并不希望连接被关闭，因此需要将 closeConnection 属性设置为 false 来阻止默认的关闭行为。例如: 123&lt;transactionManager type=&quot;MANAGED&quot;&gt; &lt;property name=&quot;closeConnection&quot; value=&quot;false&quot;/&gt;&lt;/transactionManager&gt; 提示 如果你正在使用 Spring + MyBatis，则没有必要配置事务管理器，因为 Spring 模块会使用自带的管理器来覆盖前面的配置。所以和spring整合后environment配置将废除 这两种事务管理器类型都不需要设置任何属性。它们其实是类型别名，换句话说，你可以用 TransactionFactory 接口实现类的全限定名或类型别名代替它们。 数据源（dataSource） dataSource 元素使用标准的 JDBC 数据源接口来配置 JDBC 连接对象的资源。 大多数 MyBatis 应用程序会按示例中的例子来配置数据源。虽然数据源配置是可选的，但如果要启用延迟加载特性，就必须配置数据源。 有三种内建的数据源类型（也就是 type&#x3D;”[UNPOOLED|POOLED|JNDI]”）： UNPOOLED– 这个数据源的实现会每次请求时打开和关闭连接。虽然有点慢，但对那些数据库连接可用性要求不高的简单应用程序来说，是一个很好的选择。 性能表现则依赖于使用的数据库，对某些数据库来说，使用连接池并不重要，这个配置就很适合这种情形。UNPOOLED 类型的数据源仅仅需要配置以下 5 种属性： driver – 这是 JDBC 驱动的 Java 类全限定名（并不是 JDBC 驱动中可能包含的数据源类）。 url – 这是数据库的 JDBC URL 地址。 username – 登录数据库的用户名。 password – 登录数据库的密码。 defaultTransactionIsolationLevel – 默认的连接事务隔离级别。 defaultNetworkTimeout – 等待数据库操作完成的默认网络超时时间（单位：毫秒）。查看 java.sql.Connection#setNetworkTimeout() 的 API 文档以获取更多信息。 作为可选项，你也可以传递属性给数据库驱动。只需在属性名加上“driver.”前缀即可，例如： driver.encoding=UTF8 这将通过 DriverManager.getConnection(url, driverProperties) 方法传递值为 UTF8 的 encoding 属性给数据库驱动。 POOLED– 这种数据源的实现利用“池”的概念将 JDBC 连接对象组织起来，避免了创建新的连接实例时所必需的初始化和认证时间。 这种处理方式很流行，能使并发 Web 应用快速响应请求。 除了上述提到 UNPOOLED 下的属性外，还有更多属性用来配置 POOLED 的数据源： poolMaximumActiveConnections – 在任意时间可存在的活动（正在使用）连接数量，默认值：10 poolMaximumIdleConnections – 任意时间可能存在的空闲连接数。 poolMaximumCheckoutTime – 在被强制返回之前，池中连接被检出（checked out）时间，默认值：20000 毫秒（即 20 秒） poolTimeToWait – 这是一个底层设置，如果获取连接花费了相当长的时间，连接池会打印状态日志并重新尝试获取一个连接（避免在误配置的情况下一直失败且不打印日志），默认值：20000 毫秒（即 20 秒）。 poolMaximumLocalBadConnectionTolerance – 这是一个关于坏连接容忍度的底层设置， 作用于每一个尝试从缓存池获取连接的线程。 如果这个线程获取到的是一个坏的连接，那么这个数据源允许这个线程尝试重新获取一个新的连接，但是这个重新尝试的次数不应该超过 poolMaximumIdleConnections 与 poolMaximumLocalBadConnectionTolerance 之和。 默认值：3（新增于 3.4.5） poolPingQuery – 发送到数据库的侦测查询，用来检验连接是否正常工作并准备接受请求。默认是“NO PING QUERY SET”，这会导致多数数据库驱动出错时返回恰当的错误消息。 poolPingEnabled – 是否启用侦测查询。若开启，需要设置 poolPingQuery 属性为一个可执行的 SQL 语句（最好是一个速度非常快的 SQL 语句），默认值：false。 poolPingConnectionsNotUsedFor – 配置 poolPingQuery 的频率。可以被设置为和数据库连接超时时间一样，来避免不必要的侦测，默认值：0（即所有连接每一时刻都被侦测 — 当然仅当 poolPingEnabled 为 true 时适用）。 JNDI – 这个数据源实现是为了能在如 EJB 或应用服务器这类容器中使用，容器可以集中或在外部配置数据源，然后放置一个 JNDI 上下文的数据源引用。这种数据源配置只需要两个属性： initial_context – 这个属性用来在 InitialContext 中寻找上下文（即，initialContext.lookup(initial_context)）。这是个可选属性，如果忽略，那么将会直接从 InitialContext 中寻找 data_source 属性。 data_source – 这是引用数据源实例位置的上下文路径。提供了 initial_context 配置时会在其返回的上下文中进行查找，没有提供时则直接在 InitialContext 中查找。 和其他数据源配置类似，可以通过添加前缀“env.”直接把属性传递给 InitialContext。比如： env.encoding=UTF8 这就会在 InitialContext 实例化时往它的构造方法传递值为 UTF8 的 encoding 属性。你可以通过实现接口 org.apache.ibatis.datasource.DataSourceFactory 来使用第三方数据源实现： 1234public interface DataSourceFactory &#123; void setProperties(Properties props); DataSource getDataSource();&#125; org.apache.ibatis.datasource.unpooled.UnpooledDataSourceFactory 可被用作父类来构建新的数据源适配器，比如下面这段插入 C3P0 数据源所必需的代码： 123456789import org.apache.ibatis.datasource.unpooled.UnpooledDataSourceFactory;import com.mchange.v2.c3p0.ComboPooledDataSource;public class C3P0DataSourceFactory extends UnpooledDataSourceFactory &#123; public C3P0DataSourceFactory() &#123; this.dataSource = new ComboPooledDataSource(); &#125;&#125; 为了令其工作，记得在配置文件中为每个希望 MyBatis 调用的 setter 方法增加对应的属性。 下面是一个可以连接至 PostgreSQL 数据库的例子： 123456&lt;dataSource type=&quot;org.myproject.C3P0DataSourceFactory&quot;&gt; &lt;property name=&quot;driver&quot; value=&quot;org.postgresql.Driver&quot;/&gt; &lt;property name=&quot;url&quot; value=&quot;jdbc:postgresql:mydb&quot;/&gt; &lt;property name=&quot;username&quot; value=&quot;postgres&quot;/&gt; &lt;property name=&quot;password&quot; value=&quot;root&quot;/&gt;&lt;/dataSource&gt; mappers 映射器 既然 MyBatis 的行为已经由上述元素配置完了，我们现在就要来定义 SQL 映射语句了。 但首先，我们需要告诉 MyBatis 到哪里去找到这些语句。 在自动查找资源方面，Java 并没有提供一个很好的解决方案，所以最好的办法是直接告诉 MyBatis 到哪里去找映射文件。 你可以使用相对于类路径的资源引用，或完全限定资源定位符（包括 file:/// 形式的 URL），或类名和包名等。例如： 123456&lt;!-- 使用相对于类路径的资源引用 --&gt;&lt;mappers&gt; &lt;mapper resource=&quot;org/mybatis/builder/AuthorMapper.xml&quot;/&gt; &lt;mapper resource=&quot;org/mybatis/builder/BlogMapper.xml&quot;/&gt; &lt;mapper resource=&quot;org/mybatis/builder/PostMapper.xml&quot;/&gt;&lt;/mappers&gt; 123456&lt;!-- 使用完全限定资源定位符（URL） --&gt;&lt;mappers&gt; &lt;mapper url=&quot;file:///var/mappers/AuthorMapper.xml&quot;/&gt; &lt;mapper url=&quot;file:///var/mappers/BlogMapper.xml&quot;/&gt; &lt;mapper url=&quot;file:///var/mappers/PostMapper.xml&quot;/&gt;&lt;/mappers&gt; 1234567&lt;!-- 使用映射器接口实现类的完全限定类名 --&gt;&lt;mappers&gt; &lt;mapper class=&quot;org.mybatis.builder.AuthorMapper&quot;/&gt; &lt;mapper class=&quot;org.mybatis.builder.BlogMapper&quot;/&gt; &lt;mapper class=&quot;org.mybatis.builder.PostMapper&quot;/&gt;&lt;/mappers&gt; 12345&lt;!-- 将包内的映射器接口全部注册为映射器 --&gt;&lt;mappers&gt; &lt;package name=&quot;org.mybatis.builder&quot;/&gt;&lt;/mappers&gt; 这些配置会告诉 MyBatis 去哪里找映射文件，剩下的细节就应该是每个 SQL 映射文件了，也就是接下来我们要讨论的。","categories":[{"name":"Mybatis","slug":"Mybatis","permalink":"https://little-follower.github.io/bit-by-bit.github.io/categories/Mybatis/"}],"tags":[{"name":"Mybatis基础","slug":"Mybatis基础","permalink":"https://little-follower.github.io/bit-by-bit.github.io/tags/Mybatis%E5%9F%BA%E7%A1%80/"}]},{"title":"Mybatis基础01-核心配置文件一","slug":"Mybatis基础01-核心配置文件","date":"2023-11-02T08:18:00.000Z","updated":"2023-11-03T08:06:43.305Z","comments":false,"path":"2023/11/02/Mybatis基础01-核心配置文件/","link":"","permalink":"https://little-follower.github.io/bit-by-bit.github.io/2023/11/02/Mybatis%E5%9F%BA%E7%A1%8001-%E6%A0%B8%E5%BF%83%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6/","excerpt":"","text":"Mybatis核心配置文件一 Mybatis的核心配置文件包含了会深深影响Mybatis行为的设置和属性信息。那Mybatis的核心配置文件到底长什么样子呢？我们借助核心配置文件的文档类型定义和中文帮助文档一起来学习一下。首先下载一份核心配置文件的文档类型定义，记事本打开，简单介绍一下。 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;&lt;!-- --&gt;&lt;!-- 这里的configuration 的括号里面的是mybatis核心配置文件的属性，其中是必须要按照顺序进行书写。1、问号：表示0个或1个2、星号：表示多个3、属性名1（属性名2*），属性1表示configuration的子属性，属性2*：表示是属性1的子属性，允许多个4、type CDATA #REQUIRED 表示 属性的类型是字符串，且不能为空--&gt;&lt;!ELEMENT configuration (properties?, settings?, typeAliases?, typeHandlers?, objectFactory?, objectWrapperFactory?, reflectorFactory?, plugins?, environments?, databaseIdProvider?, mappers?)&gt;&lt;!ELEMENT databaseIdProvider (property*)&gt;&lt;!ATTLIST databaseIdProvidertype CDATA #REQUIRED #表示必填&gt;&lt;!ELEMENT properties (property*)&gt;&lt;!ATTLIST propertiesresource CDATA #IMPLIEDurl CDATA #IMPLIED&gt;&lt;!ELEMENT property EMPTY&gt;&lt;!ATTLIST propertyname CDATA #REQUIREDvalue CDATA #REQUIRED&gt;&lt;!ELEMENT settings (setting+)&gt;&lt;!ELEMENT setting EMPTY&gt;&lt;!ATTLIST settingname CDATA #REQUIREDvalue CDATA #REQUIRED&gt;&lt;!ELEMENT typeAliases (typeAlias*,package*)&gt;&lt;!ELEMENT typeAlias EMPTY&gt;&lt;!ATTLIST typeAliastype CDATA #REQUIREDalias CDATA #IMPLIED&gt;&lt;!ELEMENT typeHandlers (typeHandler*,package*)&gt;&lt;!ELEMENT typeHandler EMPTY&gt;&lt;!ATTLIST typeHandlerjavaType CDATA #IMPLIEDjdbcType CDATA #IMPLIEDhandler CDATA #REQUIRED&gt;&lt;!ELEMENT objectFactory (property*)&gt;&lt;!ATTLIST objectFactorytype CDATA #REQUIRED&gt;&lt;!ELEMENT objectWrapperFactory EMPTY&gt;&lt;!ATTLIST objectWrapperFactorytype CDATA #REQUIRED&gt;&lt;!ELEMENT reflectorFactory EMPTY&gt;&lt;!ATTLIST reflectorFactorytype CDATA #REQUIRED&gt;&lt;!ELEMENT plugins (plugin+)&gt;&lt;!ELEMENT plugin (property*)&gt;&lt;!ATTLIST plugininterceptor CDATA #REQUIRED&gt;&lt;!ELEMENT environments (environment+)&gt;&lt;!ATTLIST environmentsdefault CDATA #REQUIRED&gt;&lt;!ELEMENT environment (transactionManager,dataSource)&gt;&lt;!ATTLIST environmentid CDATA #REQUIRED&gt;&lt;!ELEMENT transactionManager (property*)&gt;&lt;!ATTLIST transactionManagertype CDATA #REQUIRED&gt;&lt;!ELEMENT dataSource (property*)&gt;&lt;!ATTLIST dataSourcetype CDATA #REQUIRED&gt;&lt;!ELEMENT mappers (mapper*,package*)&gt;&lt;!ELEMENT mapper EMPTY&gt;&lt;!ATTLIST mapperresource CDATA #IMPLIEDurl CDATA #IMPLIEDclass CDATA #IMPLIED&gt;&lt;!ELEMENT package EMPTY&gt;&lt;!ATTLIST packagename CDATA #REQUIRED&gt; properties 属性 使用方式一： 将数据源中四要素提取处来，成为全局变量。 123456&lt;properties&gt; &lt;property name=&quot;driver&quot; value=&quot;com.mysql.jdbc.Driver&quot;/&gt; &lt;property name=&quot;url&quot; value=&quot;jdbc:mysql://127.0.0.1:3306/mybatis01-01&quot;/&gt; &lt;property name=&quot;username&quot; value=&quot;root&quot;/&gt; &lt;property name=&quot;password&quot; value=&quot;123456&quot;/&gt;&lt;/properties&gt; 我们定义两个environment,使用变量调用的方式获得四要素的属性值,这样就是表达出上面JDBC连接四要素成为全局变量的方便性。 1234567891011121314151617181920&lt;environments default=&quot;development&quot;&gt; &lt;environment id=&quot;development&quot;&gt; &lt;transactionManager type=&quot;JDBC&quot;/&gt; &lt;dataSource type=&quot;POOLED&quot;&gt; &lt;property name=&quot;driver&quot; value=&quot;$&#123;driver&#125;&quot;/&gt; &lt;property name=&quot;url&quot; value=&quot;$&#123;url&#125;&quot;/&gt; &lt;property name=&quot;username&quot; value=&quot;$&#123;username&#125;&quot;/&gt; &lt;property name=&quot;password&quot; value=&quot;$&#123;password&#125;&quot;/&gt; &lt;/dataSource&gt; &lt;/environment&gt; &lt;environment id=&quot;development123&quot;&gt; &lt;transactionManager type=&quot;JDBC&quot;/&gt; &lt;dataSource type=&quot;POOLED&quot;&gt; &lt;property name=&quot;driver&quot; value=&quot;$&#123;driver&#125;&quot;/&gt; &lt;property name=&quot;url&quot; value=&quot;$&#123;url&#125;&quot;/&gt; &lt;property name=&quot;username&quot; value=&quot;$&#123;username&#125;&quot;/&gt; &lt;propey name=&quot;password&quot; value=&quot;$&#123;password&#125;&quot;/&gt; &lt;/dataSource&gt; &lt;/environment&gt; &lt;/environments 执行单元测试，查询所有的部门信息结果如下: 使用方式二：(推荐使用) 在src/main/resources/下创建一个属性文件，一般取名为jdbc.properties。然后在该属性文件中保存四要素信息 12345#使用properties方式二，将jdbc连接四要素提取到单独的以properties后缀文件里面driver=com.mysql.jdbc.Driverurl=jdbc:mysql://127.0.0.1:3306/mybatis01-01username=rootpassword=123456 使用properties标签加载属性文件 1&lt;properties resource=&quot;jdbc.properties&quot;/&gt; 使用变量调用的方式获得四要素的属性值 （同上） 执行单元测试，查询所有的部门信息结果如下: 测试properties属性的优先级 不改变原有的properties文件的url，我们在核心配置文件中的properties添加额外的属性，我们url的数据库名改为一个其他的。 123&lt;properties resource=&quot;jdbc.properties&quot;&gt; &lt;property name=&quot;url&quot; value=&quot;jdbc:mysql://127.0.0.1:3306/mybatis01-05&quot;/&gt;&lt;/properties&gt; 执行结果如下： 成功执行，说明额外的properties属性优先级比核心配置文件里面的属性要高， 反之，如果我们将核心配置文件中的url的数据库改外&#x2F;mybatis01-01，properties文件的url的数据库改为mybatis01-05 1234driver=com.mysql.jdbc.Driverurl=jdbc:mysql://127.0.0.1:3306/mybatis01-05username=rootpassword=123456 123&lt;properties resource=&quot;jdbc.properties&quot;&gt; &lt;property name=&quot;url&quot; value=&quot;jdbc:mysql://127.0.0.1:3306/mybatis01-01&quot;/&gt;&lt;/properties&gt; 执行结果如下：失败，报错找不到mybatis01-05数据库 通过上面的测试，综合文档中属性（properties）结论可知： 如果一个属性在不只一个地方进行了配置，那么，MyBatis 将按照下面的顺序来加载： 首先读取在 properties 元素体内指定的属性。 然后根据 properties 元素中的 resource 属性读取类路径下属性文件，或根据 url 属性指定的路径读取属性文件，并覆盖之前读取过的同名属性。 最后读取作为方法参数传递的属性，并覆盖之前读取过的同名属性。 因此，通过方法参数传递的属性具有最高优先级，resource&#x2F;url 属性中指定的配置文件次之，最低优先级的则是 properties 元素中指定的属性。 如果我们就想核心配置文件中的url生效，我们可以这样写 1234&lt;!--强制在properties中使url生效，可以改name的名字再调用中也引用此配置的name值--&gt;&lt;properties resource=&quot;jdbc.properties&quot;&gt; &lt;property name=&quot;url3&quot; value=&quot;jdbc:mysql://127.0.0.1:3306/mybatis01-01&quot;/&gt;&lt;/properties&gt;--&gt; 1234567891011&lt;environments default=&quot;development&quot;&gt; &lt;environment id=&quot;development&quot;&gt; &lt;transactionManager type=&quot;JDBC&quot;/&gt; &lt;dataSource type=&quot;POOLED&quot;&gt; &lt;property name=&quot;driver&quot; value=&quot;$&#123;driver&#125;&quot;/&gt; &lt;property name=&quot;url&quot; value=&quot;$&#123;url3&#125;&quot;/&gt; &lt;property name=&quot;username&quot; value=&quot;$&#123;username&#125;&quot;/&gt; &lt;property name=&quot;password&quot; value=&quot;$&#123;password&#125;&quot;/&gt; &lt;/dataSource&gt; &lt;/environment&gt;&lt;/environments&gt; 执行结果成功！这里就偷懒不截图了~ 使用方法三：方法参数传递的属性 也可以在SqlSessionFactoryBuilder.build()方法中传入属性值 多添加一个数据源环境：此时配置文件中，设置使用的数据源是id=&quot;development&quot; 1234567891011121314151617181920212223242526&lt;properties resource=&quot;jdbc.properties&quot;&gt; &lt;property name=&quot;url3&quot; value=&quot;jdbc:mysql://127.0.0.1:3306/mybatis01-01&quot;/&gt; &lt;/properties&gt; &lt;environments default=&quot;development&quot;&gt; &lt;environment id=&quot;development&quot;&gt; &lt;transactionManager type=&quot;JDBC&quot;/&gt; &lt;dataSource type=&quot;POOLED&quot;&gt; &lt;property name=&quot;driver&quot; value=&quot;$&#123;driver&#125;&quot;/&gt; &lt;property name=&quot;url&quot; value=&quot;$&#123;url&#125;&quot;/&gt; &lt;property name=&quot;username&quot; value=&quot;$&#123;username&#125;&quot;/&gt; &lt;property name=&quot;password&quot; value=&quot;$&#123;password&#125;&quot;/&gt; &lt;/dataSource&gt; &lt;/environment&gt; &lt;environment id=&quot;development123&quot;&gt; &lt;transactionManager type=&quot;JDBC&quot;/&gt; &lt;dataSource type=&quot;POOLED&quot;&gt; &lt;property name=&quot;driver&quot; value=&quot;$&#123;driver&#125;&quot;/&gt; &lt;property name=&quot;url&quot; value=&quot;$&#123;url3&#125;&quot;/&gt; &lt;property name=&quot;username&quot; value=&quot;$&#123;username&#125;&quot;/&gt; &lt;property name=&quot;password&quot; value=&quot;$&#123;password&#125;&quot;/&gt; &lt;/dataSource&gt; &lt;/environment&gt; &lt;/environments&gt; &lt;mappers&gt; &lt;mapper resource=&quot;mapper/DeptMapper.xml&quot;/&gt; &lt;/mappers&gt; 在单元测试代码中构建SqlSessionFactory对象是，进行特殊声明我们要是用的环境名称。 123456789101112131415161718192021public class MyBatisTest &#123; @Test public void selectAll () throws Exception&#123; // 1.加载mybatis的配置文件 InputStream io = Resources.getResourceAsStream(&quot;mybatisConfig.xml&quot;); // 2.获得session对象，接收对象 SqlSessionFactoryBuilder sqlSessionFactoryBuilder = new SqlSessionFactoryBuilder();// SqlSessionFactory sqlSessionFactory = sqlSessionFactoryBuilder.build(io); SqlSessionFactory sqlSessionFactory = sqlSessionFactoryBuilder.build(io,&quot;development123&quot;); SqlSession session = sqlSessionFactory.openSession(); List&lt;Dept&gt; list = session.selectList(&quot;selectAllDept&quot;); for(Dept dept:list) &#123; System.out.println(dept.toString()); &#125; session.close(); &#125;&#125; 这里我补充: SqlSessionFacotry 构建SqlSessionFactory的重载方法如下： 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677public class SqlSessionFactoryBuilder &#123; public SqlSessionFactoryBuilder() &#123; &#125; public SqlSessionFactory build(Reader reader) &#123; return this.build((Reader)reader, (String)null, (Properties)null); &#125; public SqlSessionFactory build(Reader reader, String environment) &#123; return this.build((Reader)reader, environment, (Properties)null); &#125; public SqlSessionFactory build(Reader reader, Properties properties) &#123; return this.build((Reader)reader, (String)null, properties); &#125; public SqlSessionFactory build(Reader reader, String environment, Properties properties) &#123; SqlSessionFactory var5; try &#123; XMLConfigBuilder parser = new XMLConfigBuilder(reader, environment, properties); var5 = this.build(parser.parse()); &#125; catch (Exception var14) &#123; throw ExceptionFactory.wrapException(&quot;Error building SqlSession.&quot;, var14); &#125; finally &#123; ErrorContext.instance().reset(); try &#123; if (reader != null) &#123; reader.close(); &#125; &#125; catch (IOException var13) &#123; &#125; &#125; return var5; &#125; public SqlSessionFactory build(InputStream inputStream) &#123; return this.build((InputStream)inputStream, (String)null, (Properties)null); &#125; public SqlSessionFactory build(InputStream inputStream, String environment) &#123; return this.build((InputStream)inputStream, environment, (Properties)null); &#125; public SqlSessionFactory build(InputStream inputStream, Properties properties) &#123; return this.build((InputStream)inputStream, (String)null, properties); &#125; public SqlSessionFactory build(InputStream inputStream, String environment, Properties properties) &#123; SqlSessionFactory var5; try &#123; XMLConfigBuilder parser = new XMLConfigBuilder(inputStream, environment, properties); var5 = this.build(parser.parse()); &#125; catch (Exception var14) &#123; throw ExceptionFactory.wrapException(&quot;Error building SqlSession.&quot;, var14); &#125; finally &#123; ErrorContext.instance().reset(); try &#123; if (inputStream != null) &#123; inputStream.close(); &#125; &#125; catch (IOException var13) &#123; &#125; &#125; return var5; &#125; public SqlSessionFactory build(Configuration config) &#123; return new DefaultSqlSessionFactory(config); &#125;&#125; 执行结果成功~ 默认值设置 就是在我们的jdbc.properties或者核心配置文件都没有设置password属性，这样的情况我们可以设置默认属性值， 12345678910111213141516171819202122232425262728&lt;!--强制在properties中使url生效，可以改name的名字再调用中也引用此配置的name值--&gt; &lt;properties resource=&quot;jdbc.properties&quot;&gt; &lt;property name=&quot;url3&quot; value=&quot;jdbc:mysql://127.0.0.1:3306/mybatis01-01&quot;/&gt;&lt;!-- &lt;property name=&quot;password&quot; value=&quot;$&#123;password:ut_user&#125;&quot;/&gt;--&gt; &lt;!-- 如果属性 &#x27;username&#x27; 没有被配置，&#x27;username&#x27; 属性的值将为 &#x27;ut_user&#x27; --&gt; &lt;property name=&quot;org.apache.ibatis.parsing.PropertyParser.enable-default-value&quot; value=&quot;true&quot;/&gt; &lt;!-- 启用默认值特性 --&gt; &lt;/properties&gt; &lt;environments default=&quot;development&quot;&gt; &lt;environment id=&quot;development&quot;&gt; &lt;transactionManager type=&quot;JDBC&quot;/&gt; &lt;dataSource type=&quot;POOLED&quot;&gt; &lt;property name=&quot;driver&quot; value=&quot;$&#123;driver&#125;&quot;/&gt; &lt;property name=&quot;url&quot; value=&quot;$&#123;url&#125;&quot;/&gt; &lt;property name=&quot;username&quot; value=&quot;$&#123;username&#125;&quot;/&gt; &lt;property name=&quot;password&quot; value=&quot;$&#123;password:root&#125;&quot;/&gt; &lt;/dataSource&gt; &lt;/environment&gt; &lt;environment id=&quot;development123&quot;&gt; &lt;transactionManager type=&quot;JDBC&quot;/&gt; &lt;dataSource type=&quot;POOLED&quot;&gt; &lt;property name=&quot;driver&quot; value=&quot;$&#123;driver&#125;&quot;/&gt; &lt;property name=&quot;url&quot; value=&quot;$&#123;url3&#125;&quot;/&gt; &lt;property name=&quot;username&quot; value=&quot;$&#123;username&#125;&quot;/&gt; &lt;property name=&quot;password&quot; value=&quot;$&#123;password:root&#125;&quot;/&gt; &lt;/dataSource&gt; &lt;/environment&gt; &lt;/environments&gt; 参考文档中属性（properties）结论可知：","categories":[{"name":"Mybatis","slug":"Mybatis","permalink":"https://little-follower.github.io/bit-by-bit.github.io/categories/Mybatis/"}],"tags":[{"name":"Mybatis基础","slug":"Mybatis基础","permalink":"https://little-follower.github.io/bit-by-bit.github.io/tags/Mybatis%E5%9F%BA%E7%A1%80/"}]},{"title":"Mybatis01基础-环境搭建","slug":"Mybatis的环境搭建","date":"2023-10-31T08:31:50.000Z","updated":"2023-11-03T08:01:59.620Z","comments":false,"path":"2023/10/31/Mybatis的环境搭建/","link":"","permalink":"https://little-follower.github.io/bit-by-bit.github.io/2023/10/31/Mybatis%E7%9A%84%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/","excerpt":"","text":"项目结构 添加项目依赖1234567891011121314151617181920212223242526272829&lt;dependencies&gt; &lt;!--mybatis 核心包--&gt; &lt;dependency&gt; &lt;groupId&gt;org.mybatis&lt;/groupId&gt; &lt;artifactId&gt;mybatis&lt;/artifactId&gt; &lt;version&gt;3.5.12&lt;/version&gt; &lt;/dependency&gt; &lt;!--mysql驱动包--&gt; &lt;dependency&gt; &lt;groupId&gt;mysql&lt;/groupId&gt; &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt; &lt;version&gt;8.0.33&lt;/version&gt; &lt;/dependency&gt; &lt;!--junit测试包--&gt; &lt;dependency&gt; &lt;groupId&gt;junit&lt;/groupId&gt; &lt;artifactId&gt;junit&lt;/artifactId&gt; &lt;version&gt;4.13.2&lt;/version&gt; &lt;/dependency&gt; &lt;!--日志包，方便查看sql语句--&gt; &lt;dependency&gt; &lt;groupId&gt;org.slf4j&lt;/groupId&gt; &lt;artifactId&gt;slf4j-log4j12&lt;/artifactId&gt; &lt;version&gt;1.7.36&lt;/version&gt; &lt;/dependency&gt; &lt;/dependencies&gt; 创建SqlMapconfig.xml全局配置文件 创建mybatis-config.xml模板文件 idea工具栏菜单先点击File-&gt;Settings-&gt;Editor-&gt;选择File and Code Templates 浏览器查看Mybatis的官方文档，点击入门就能看到，复制到idea中 1234567891011121314151617181920&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;&lt;!DOCTYPE configuration PUBLIC &quot;-//mybatis.org//DTD Config 3.0//EN&quot; &quot;https://mybatis.org/dtd/mybatis-3-config.dtd&quot;&gt;&lt;configuration&gt; &lt;environments default=&quot;development&quot;&gt; &lt;environment id=&quot;development&quot;&gt; &lt;transactionManager type=&quot;JDBC&quot;/&gt; &lt;dataSource type=&quot;POOLED&quot;&gt; &lt;property name=&quot;driver&quot; value=&quot;$&#123;driver&#125;&quot;/&gt; &lt;property name=&quot;url&quot; value=&quot;$&#123;url&#125;&quot;/&gt; &lt;property name=&quot;username&quot; value=&quot;$&#123;username&#125;&quot;/&gt; &lt;property name=&quot;password&quot; value=&quot;$&#123;password&#125;&quot;/&gt; &lt;/dataSource&gt; &lt;/environment&gt; &lt;/environments&gt; &lt;mappers&gt; &lt;mapper resource=&quot;org/mybatis/example/BlogMapper.xml&quot;/&gt; &lt;/mappers&gt;&lt;/configuration&gt; 创建MybatisMapper.xml模板文件 idea工具栏菜单先点击File-&gt;Settings-&gt;Editor-&gt;选择File and Code Templates 浏览器查看Mybatis的官方文档，点击探究已映射的 SQL 语句就能看到，复制到idea中 123456789&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;&lt;!DOCTYPE mapper PUBLIC &quot;-//mybatis.org//DTD Mapper 3.0//EN&quot; &quot;https://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;&gt;&lt;mapper namespace=&quot;org.mybatis.example.BlogMapper&quot;&gt; &lt;select id=&quot;selectBlog&quot; resultType=&quot;Blog&quot;&gt; select * from Blog where id = #&#123;id&#125; &lt;/select&gt;&lt;/mapper&gt; idea创建SqlMapconfig文件 点击File选择NEW点击我们刚刚创建的模板，并填写数据库连接配置信息 1234567891011121314151617181920&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;&lt;!DOCTYPE configuration PUBLIC &quot;-//mybatis.org//DTD Config 3.0//EN&quot; &quot;https://mybatis.org/dtd/mybatis-3-config.dtd&quot;&gt;&lt;configuration&gt; &lt;environments default=&quot;development&quot;&gt; &lt;environment id=&quot;development&quot;&gt; &lt;transactionManager type=&quot;JDBC&quot;/&gt; &lt;dataSource type=&quot;POOLED&quot;&gt; &lt;property name=&quot;driver&quot; value=&quot;com.mysql.jdbc.Driver&quot;/&gt; &lt;property name=&quot;url&quot; value=&quot;jdbc:mysql://127.0.0.1:3306/test&quot;/&gt; &lt;property name=&quot;username&quot; value=&quot;root&quot;/&gt; &lt;property name=&quot;password&quot; value=&quot;123456&quot;/&gt; &lt;/dataSource&gt; &lt;/environment&gt; &lt;/environments&gt; &lt;mappers&gt; &lt;mapper resource=&quot;org/mybatis/example/BlogMapper.xml&quot;/&gt; &lt;/mappers&gt;&lt;/configuration&gt; 创建实体类1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556package com.bit.by.bit.pojos;/** * @author: chengqing Zhang * @description: 部门实体类 * @date:Create：in 2023/11/2 10:56 * @modified By： */public class Dept &#123; private Integer deptno; private String dname; private String loc; public Dept() &#123; &#125; public Dept(Integer deptno, String dname, String loc) &#123; this.deptno = deptno; this.dname = dname; this.loc = loc; &#125; public Integer getDeptno() &#123; return deptno; &#125; public void setDeptno(Integer deptno) &#123; this.deptno = deptno; &#125; public String getDname() &#123; return dname; &#125; public void setDname(String dname) &#123; this.dname = dname; &#125; public String getLoc() &#123; return loc; &#125; public void setLoc(String loc) &#123; this.loc = loc; &#125; @Override public String toString() &#123; return &quot;Dept&#123;&quot; + &quot;deptno=&quot; + deptno + &quot;, dname=&#x27;&quot; + dname + &#x27;\\&#x27;&#x27; + &quot;, loc=&#x27;&quot; + loc + &#x27;\\&#x27;&#x27; + &#x27;&#125;&#x27;; &#125;&#125; 创建mapper.xml映射文件1234567891011&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;&lt;!DOCTYPE mapper PUBLIC &quot;-//mybatis.org//DTD Mapper 3.0//EN&quot; &quot;https://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;&gt;&lt;mapper namespace=&quot;org.mybatis.example.BlogMapper&quot;&gt; &lt;select id=&quot;selectAllDept&quot; resultType=&quot;com.bit.by.bit.pojos.Dept&quot;&gt; select * from dept &lt;/select&gt;&lt;/mapper&gt; 创建Junit测试类123456789101112131415161718192021public class MyBatisTest &#123; @Test public void selectAll () throws Exception&#123; // 1.加载mybatis的配置文件 InputStream io = Resources.getResourceAsStream(&quot;mybatisConfig.xml&quot;); // 2.获得session对象，接收对象 SqlSessionFactoryBuilder sqlSessionFactoryBuilder = new SqlSessionFactoryBuilder(); SqlSessionFactory sqlSessionFactory = sqlSessionFactoryBuilder.build(io); SqlSession session = sqlSessionFactory.openSession(); List&lt;Dept&gt; list = session.selectList(&quot;selectAllDept&quot;); for(Dept dept:list) &#123; System.out.println(dept.toString()); &#125; session.close(); &#125;&#125; 添加log4j查询生成的sql语句12345678# Global logging configurationlog4j.rootLogger=ERROR, stdout# MyBatis logging configuration...log4j.logger.org.mybatis.example.BlogMapper=TRACE# Console output...log4j.appender.stdout=org.apache.log4j.ConsoleAppenderlog4j.appender.stdout.layout=org.apache.log4j.PatternLayoutlog4j.appender.stdout.layout.ConversionPattern=%5p [%t] - %m%n 项目源代码源代码请参考链接Repository中的mybatis-&gt;myabtis-1","categories":[{"name":"Mybatis","slug":"Mybatis","permalink":"https://little-follower.github.io/bit-by-bit.github.io/categories/Mybatis/"}],"tags":[{"name":"Mybatis基础","slug":"Mybatis基础","permalink":"https://little-follower.github.io/bit-by-bit.github.io/tags/Mybatis%E5%9F%BA%E7%A1%80/"}]},{"title":"Mybatis01基础-框架介绍","slug":"mybatis-01基础","date":"2023-10-31T03:05:09.000Z","updated":"2023-11-03T08:01:34.563Z","comments":false,"path":"2023/10/31/mybatis-01基础/","link":"","permalink":"https://little-follower.github.io/bit-by-bit.github.io/2023/10/31/mybatis-01%E5%9F%BA%E7%A1%80/","excerpt":"","text":"Mybatis框架基础 本章主要学习关于mybatis的框架介绍、介绍Mybatis、讲解结构图核心类工作流程、resources下文件打包问题、环境搭建、核心配置文件1、核心配置文件2、核心配置文件3、mapper映射文件1、mapper映射文件2。 Mybatis 的基本信息 Mybatis本是Apache的一个开源项目iBatis，2010年这个项目由apache software foundation迁移到google code，并且改名为Mybatis。2013年迁移到GitHub。当前，最新版本是MyBatis 3.5.5，其发布时间是2020年06月04日。Mybatis是一个基于Java的数据持久层ORM框架。把实体类和SQL语句之间建立了映射联系，是一种半自动化ORM实现。 ORM 对象关系映射，是一种数据持久化技术 O: Object 对象&#x3D;&#x3D;&#x3D;java里的实例类（对象） R: Relation 关系&#x3D;&#x3D;&#x3D;关系型数据库表（表） M：Mapping 映射&#x3D;&#x3D;&#x3D;提供一种机制，实现映射 半自动化：需要写一些SQL，才能完成，指定功能 全自动化：无需使用SQL语句，直接操作实体类对象，就可以对应的操作数据库表里的数据。 有全自动为什么还需要半自动化？&#x3D;&#x3D;&#x3D;多表查询的时候，分页查询的时候，全自动在进行修改的时候反而很复杂 Mybatis支持定制化SQL，存储过程以及高级映射。 Mybatis可以使用简单的XML或注解来配置和映射原生信息，将接口和Java的POJOs（Plain Ordinary Java Object，普通的Java对象）映射成数据库中的记录。 Mybatis与传统的JDBC比较 Mybatis避免了几乎所有的JDBC代码和手动设置参数以及获取结果集 传统JDBC实现根据用户名查询用户信息代码： 123456789101112131415Class.forName(&quot;com.mysql.jdbc.Driver&quot;);String url = &quot;jdbc:mysql://localhost:3306/test&quot;;String user =&quot;root&quot;;String password = &quot;root&quot;;Connection connection = DriverManager.getConnection(url,user,password);String sql = &quot;SELECT * FROM userinfo where username = ?&quot;;PreparedStatement statement = connection.prepareStatement(sql);statement .setString(1,&quot;王五&quot;);ResultSet rs = statement.exctuteQuery();while(rs.next()) &#123; System.out.printLn(rs.getString(&quot;id&quot;)+rs.getString(&quot;username&quot;));&#125;rs.close();statement.close();connection.close; 发现JDBC操作非常繁琐 定义数据连接参数 打开数据库连接 声明SQL语句 预编译并执行SQL语句 遍历查询结果（如果需要的话），对每一条记录进行处理 处理事务 关闭数据库连接 以上步骤每次除了3和5步骤，其他全部是重复工作。 Mybaits配置文件实现根据用户名查询用户信息代码： 12345&lt;mapper namespace=&quot;test&quot;&gt; &lt;select id=&quot;findUserByName&quot; parameterType=&quot;java.lang.String&quot; resultType=&quot;com.by.pojo.User&quot;&gt; SELECT * FROM USERINFO WHERE USERNAME LIKE &#x27;%$&#123;value&#125;%&#x27; &lt;/select&gt;&lt;/mapper&gt; 为什么学习Mybatis？ 为了和数据库进行交互，通常的做法是将SQL语句写在Java代码中，SQL语句和Java代码耦合在一起不利于后期维护修改，而Mybatis能够帮助我们将SQL语句和Java代码分离，方便了后期因需求变动而对SQL语句进行修改。 采用ORM思想解决了实体对象和数据库映射的问题，对JDBC进行了分装，屏蔽了JDBC api底层访问细节，使我们不用与JDBC api打交道，就可以完成对数据库的持久化操作；同时Mybatis封装了绝大部分JDBC中参数设置和返回值接收工作，我们不需要编写大量臃肿代码。 Mybatis框架功能架构 Mybatis 框架功能架构分为三层： API 接口层： 首先接口层使我们打交道最多的。核心对象是SqlSession,它是上层应用和Mybatis打交道的桥梁，SqlSession上定义了非常多的对数据库的操作方法。接口层在接收到调用请求的时候，会调用核心处理层的相应模块来完成具体的数据库操作。 数据库处理层&#x2F;核心处理层：跟数据库操作相关的动作都是在这一层完成的。核心处理层主要做了这几件事： 把接口中传入的参数解析并且映射成JDBC类型； 解析XML文件中的SQL语句，包括插入参数和动态SQL的生成； 执行SQL语句； 处理结果集，并映射成Java对象； 基础支撑层：基础支持层主要是一些抽象出来的通用的功能（实现复用），比如数据源、缓存、日志、XML解析、反射、IO、事务等等这些功能。为上层的数据处理层提供最基础的支撑。 Mybatis核心类及工作流程SqlSessionFactory 每个基于Mybatis的应用都是以一个SqlSessionFactory的实例为中心。SqlSessionFactory的实例可以通过SqlSessionFactoryBuilder获得。而SqlSessionFactoryBuilder则可以从XML配置文件或者通过Java的方式构建出SqlSessionFactory的实例。SqlSessionFactory一但被创建就应该在应用的运行期间一直存在。一个SqlSessionFactory对应配置文件中的一个环境（environment），如果你要是用读个数据库就配置多个环境分别对应一个SqlSessionFactory。 SqlSession SqlSession是一个接口，它有两个实现类，分别是DefaultSqlSession（默认使用）以及SqlSessionManager。SqlSession通过内部存放的执行器（Executor）来对数据进行CRUD。此外SqlSession不是线程安全的，因为每一次操作完数据库都要调用cloes对其进行关闭，官方建议通过try-finally来保证总是关闭SqlSession。 Executor Executor（执行器）接口有两个实现类，其中BaseExecutor有三个继承类分别是BatchExcutor（重用语句并执行批量更新），ReuseExecutor（重用预处理语句prepared statement，跟Simple的唯一区别就是内部缓存statement），SimpleExecutor（默认，每次都会创建新的statement）。以上三个就是主要的Executor、我们可以用CachingExecutor内装饰前面的三个执行器目的就是用来实现缓存。 MappedStatement MappedStatement就是用来存放我们SQL映射文件中的信息包括SQL语句，输入参数、输出参数等等。一个SQL对应一个MappedStatement对象。 Mybatis工作流程 加载配置文件并初始化 首先在Mybatis启动的时候我们要去解析配置文件，包括全局配置文件和映射文件和映射器配置文件。全局配置文件里面包含了我们怎么控制Mybatis的行为，我们会把它们解析成一个Configuration对象。映射器配置文件包含了我们要对数据库下达的指令。也就是我们的SQL信息。然后一个SQL节点会被对应解析成一个MappedStatement对象存储在内存中。 接下来就是我们操作数据的接口，他在应用程序和数据库中间。 代表我们跟数据库之间的一次连接：这个这个就是SqlSession对象。我们要获得一个SqlSession对象或者说是获得一次连接会话，必须有一个会话工厂SqlSessionFactory。SqlSessionFactory里面又必须包含我们的所有的配置信息，所以我们会通过一个FactoryBuilder来创建工厂类。 接收调用的请求 接收SQL的ID和传入的参数对象 处理操作请求 根据SQL的ID查找对应的MappedStatement对象。 根据传入参数对象解析MappedStatement对象，得到最终要执行的SQL和执行传入参数。 获取数据库连接，根据得到的最终SQL语句和执行传入参数到数据库执行，并得到执行结果。 根据MappedStatement对象中的结果映射配置，对得到的执行结果进行转换处理，并得到最终的处理结果。 释放连接资源。 返回最终的处理结果 我们知道Mybatis是对JDBC的封装，也就是意味着底层一定会出现JDBC的一些核心对象，比如执行SQL的Statement，结果集ResultSet。在Mybatis里面，SqlSession只是提供给应用一个接口，还不是SQL的真正的执行对象。其实SqlSession内部是持有了一个Executor对象，用来封装对数据库的操作。在执行器Executor执行query或者update操作的时候我们创建一系列的对象，来处理参数、执行SQL、处理结果集，这里我们把它简化成一个对象StatementHandler，（但是ExecutorStatementHandler我们都操作不到，底层源码可以看到）以上这些就是Mybatis主要的工作流程。","categories":[{"name":"Mybatis","slug":"Mybatis","permalink":"https://little-follower.github.io/bit-by-bit.github.io/categories/Mybatis/"}],"tags":[{"name":"Mybatis基础","slug":"Mybatis基础","permalink":"https://little-follower.github.io/bit-by-bit.github.io/tags/Mybatis%E5%9F%BA%E7%A1%80/"}]},{"title":"hexo的基本使用","slug":"hello-world","date":"2023-10-24T06:57:06.721Z","updated":"2023-10-24T16:22:59.474Z","comments":false,"path":"2023/10/24/hello-world/","link":"","permalink":"https://little-follower.github.io/bit-by-bit.github.io/2023/10/24/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new &quot;My New Post&quot; More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[{"name":"hexo","slug":"hexo","permalink":"https://little-follower.github.io/bit-by-bit.github.io/categories/hexo/"}],"tags":[{"name":"教程","slug":"教程","permalink":"https://little-follower.github.io/bit-by-bit.github.io/tags/%E6%95%99%E7%A8%8B/"}]}],"categories":[{"name":"Mybatis","slug":"Mybatis","permalink":"https://little-follower.github.io/bit-by-bit.github.io/categories/Mybatis/"},{"name":"hexo","slug":"hexo","permalink":"https://little-follower.github.io/bit-by-bit.github.io/categories/hexo/"}],"tags":[{"name":"Mybatis基础","slug":"Mybatis基础","permalink":"https://little-follower.github.io/bit-by-bit.github.io/tags/Mybatis%E5%9F%BA%E7%A1%80/"},{"name":"教程","slug":"教程","permalink":"https://little-follower.github.io/bit-by-bit.github.io/tags/%E6%95%99%E7%A8%8B/"}]}