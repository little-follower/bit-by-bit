{"meta":{"title":"小跟班博客","subtitle":"记录自己的成长与不负韶华","description":"灵魂的欲望是命运的先知","author":"小跟班","url":"https://little-follower.github.io/bit-by-bit.github.io","root":"/bit-by-bit.github.io/"},"pages":[{"title":"图库","date":"2023-10-25T16:15:43.000Z","updated":"2023-10-25T16:34:24.924Z","comments":true,"path":"Gallery/index.html","permalink":"https://little-follower.github.io/bit-by-bit.github.io/Gallery/index.html","excerpt":"","text":"壁纸 AI生成的好的图片 漫威 关于漫威的图片"},{"title":"categories","date":"2023-10-25T03:43:03.000Z","updated":"2023-10-25T03:52:13.037Z","comments":true,"path":"categories/index.html","permalink":"https://little-follower.github.io/bit-by-bit.github.io/categories/index.html","excerpt":"","text":""},{"title":"AI图片","date":"2023-10-25T16:15:43.000Z","updated":"2023-10-25T16:34:41.249Z","comments":true,"path":"Gallery/ai/index.html","permalink":"https://little-follower.github.io/bit-by-bit.github.io/Gallery/ai/index.html","excerpt":"","text":"[{\"url\":\"https://raw.githubusercontent.com/little-follower/backet/main/butterfly/childandCloud.jpg\",\"alt\":\"\"},{\"url\":\"https://raw.githubusercontent.com/little-follower/backet/main/butterfly/eq.jpg\",\"alt\":\"\"},{\"url\":\"https://raw.githubusercontent.com/little-follower/backet/main/butterfly/gildAndGrita.jpg\",\"alt\":\"\"},{\"url\":\"https://raw.githubusercontent.com/little-follower/backet/main/butterfly/mountain.jpg\",\"alt\":\"\"},{\"url\":\"https://raw.githubusercontent.com/little-follower/backet/main/butterfly/titleBackgroud.jpg\",\"alt\":\"\"}]"},{"title":"link","date":"2023-10-25T03:52:30.000Z","updated":"2023-10-25T15:36:49.258Z","comments":true,"path":"link/index.html","permalink":"https://little-follower.github.io/bit-by-bit.github.io/link/index.html","excerpt":"","text":"友链页面我会持续优化"},{"title":"tags","date":"2023-10-25T03:51:14.000Z","updated":"2023-10-25T03:51:45.418Z","comments":true,"path":"tags/index.html","permalink":"https://little-follower.github.io/bit-by-bit.github.io/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"Mybatis-基础一","slug":"mybatis-01基础","date":"2023-10-31T03:05:09.000Z","updated":"2023-10-31T08:29:29.308Z","comments":false,"path":"2023/10/31/mybatis-01基础/","link":"","permalink":"https://little-follower.github.io/bit-by-bit.github.io/2023/10/31/mybatis-01%E5%9F%BA%E7%A1%80/","excerpt":"","text":"Mybatis框架基础 本章主要学习关于mybatis的框架介绍、介绍Mybatis、讲解结构图核心类工作流程、resources下文件打包问题、环境搭建、核心配置文件1、核心配置文件2、核心配置文件3、mapper映射文件1、mapper映射文件2。 Mybatis 的基本信息 Mybatis本是Apache的一个开源项目iBatis，2010年这个项目由apache software foundation迁移到google code，并且改名为Mybatis。2013年迁移到GitHub。当前，最新版本是MyBatis 3.5.5，其发布时间是2020年06月04日。Mybatis是一个基于Java的数据持久层ORM框架。把实体类和SQL语句之间建立了映射联系，是一种半自动化ORM实现。 ORM 对象关系映射，是一种数据持久化技术 O: Object 对象&#x3D;&#x3D;&#x3D;java里的实例类（对象） R: Relation 关系&#x3D;&#x3D;&#x3D;关系型数据库表（表） M：Mapping 映射&#x3D;&#x3D;&#x3D;提供一种机制，实现映射 半自动化：需要写一些SQL，才能完成，指定功能 全自动化：无需使用SQL语句，直接操作实体类对象，就可以对应的操作数据库表里的数据。 有全自动为什么还需要半自动化？&#x3D;&#x3D;&#x3D;多表查询的时候，分页查询的时候，全自动在进行修改的时候反而很复杂 Mybatis支持定制化SQL，存储过程以及高级映射。 Mybatis可以使用简单的XML或注解来配置和映射原生信息，将接口和Java的POJOs（Plain Ordinary Java Object，普通的Java对象）映射成数据库中的记录。 Mybatis与传统的JDBC比较 Mybatis避免了几乎所有的JDBC代码和手动设置参数以及获取结果集 传统JDBC实现根据用户名查询用户信息代码： 123456789101112131415Class.forName(&quot;com.mysql.jdbc.Driver&quot;);String url = &quot;jdbc:mysql://localhost:3306/test&quot;;String user =&quot;root&quot;;String password = &quot;root&quot;;Connection connection = DriverManager.getConnection(url,user,password);String sql = &quot;SELECT * FROM userinfo where username = ?&quot;;PreparedStatement statement = connection.prepareStatement(sql);statement .setString(1,&quot;王五&quot;);ResultSet rs = statement.exctuteQuery();while(rs.next()) &#123; System.out.printLn(rs.getString(&quot;id&quot;)+rs.getString(&quot;username&quot;));&#125;rs.close();statement.close();connection.close; 发现JDBC操作非常繁琐 定义数据连接参数 打开数据库连接 声明SQL语句 预编译并执行SQL语句 遍历查询结果（如果需要的话），对每一条记录进行处理 处理事务 关闭数据库连接 以上步骤每次除了3和5步骤，其他全部是重复工作。 Mybaits配置文件实现根据用户名查询用户信息代码： 12345&lt;mapper namespace=&quot;test&quot;&gt; &lt;select id=&quot;findUserByName&quot; parameterType=&quot;java.lang.String&quot; resultType=&quot;com.by.pojo.User&quot;&gt; SELECT * FROM USERINFO WHERE USERNAME LIKE &#x27;%$&#123;value&#125;%&#x27; &lt;/select&gt;&lt;/mapper&gt; 为什么学习Mybatis？ 为了和数据库进行交互，通常的做法是将SQL语句写在Java代码中，SQL语句和Java代码耦合在一起不利于后期维护修改，而Mybatis能够帮助我们将SQL语句和Java代码分离，方便了后期因需求变动而对SQL语句进行修改。 采用ORM思想解决了实体对象和数据库映射的问题，对JDBC进行了分装，屏蔽了JDBC api底层访问细节，使我们不用与JDBC api打交道，就可以完成对数据库的持久化操作；同时Mybatis封装了绝大部分JDBC中参数设置和返回值接收工作，我们不需要编写大量臃肿代码。 Mybatis框架功能架构 Mybatis 框架功能架构分为三层： API 接口层： 首先接口层使我们打交道最多的。核心对象是SqlSession,它是上层应用和Mybatis打交道的桥梁，SqlSession上定义了非常多的对数据库的操作方法。接口层在接收到调用请求的时候，会调用核心处理层的相应模块来完成具体的数据库操作。 数据库处理层&#x2F;核心处理层：跟数据库操作相关的动作都是在这一层完成的。核心处理层主要做了这几件事： 把接口中传入的参数解析并且映射成JDBC类型； 解析XML文件中的SQL语句，包括插入参数和动态SQL的生成； 执行SQL语句； 处理结果集，并映射成Java对象； 基础支撑层：基础支持层主要是一些抽象出来的通用的功能（实现复用），比如数据源、缓存、日志、XML解析、反射、IO、事务等等这些功能。为上层的数据处理层提供最基础的支撑。 Mybatis核心类及工作流程SqlSessionFactory 每个基于Mybatis的应用都是以一个SqlSessionFactory的实例为中心。SqlSessionFactory的实例可以通过SqlSessionFactoryBuilder获得。而SqlSessionFactoryBuilder则可以从XML配置文件或者通过Java的方式构建出SqlSessionFactory的实例。SqlSessionFactory一但被创建就应该在应用的运行期间一直存在。一个SqlSessionFactory对应配置文件中的一个环境（environment），如果你要是用读个数据库就配置多个环境分别对应一个SqlSessionFactory。 SqlSession SqlSession是一个接口，它有两个实现类，分别是DefaultSqlSession（默认使用）以及SqlSessionManager。SqlSession通过内部存放的执行器（Executor）来对数据进行CRUD。此外SqlSession不是线程安全的，因为每一次操作完数据库都要调用cloes对其进行关闭，官方建议通过try-finally来保证总是关闭SqlSession。 Executor Executor（执行器）接口有两个实现类，其中BaseExecutor有三个继承类分别是BatchExcutor（重用语句并执行批量更新），ReuseExecutor（重用预处理语句prepared statement，跟Simple的唯一区别就是内部缓存statement），SimpleExecutor（默认，每次都会创建新的statement）。以上三个就是主要的Executor、我们可以用CachingExecutor内装饰前面的三个执行器目的就是用来实现缓存。 MappedStatement MappedStatement就是用来存放我们SQL映射文件中的信息包括SQL语句，输入参数、输出参数等等。一个SQL对应一个MappedStatement对象。 Mybatis工作流程 加载配置文件并初始化 首先在Mybatis启动的时候我们要去解析配置文件，包括全局配置文件和映射文件和映射器配置文件。全局配置文件里面包含了我们怎么控制Mybatis的行为，我们会把它们解析成一个Configuration对象。映射器配置文件包含了我们要对数据库下达的指令。也就是我们的SQL信息。然后一个SQL节点会被对应解析成一个MappedStatement对象存储在内存中。 接下来就是我们操作数据的接口，他在应用程序和数据库中间。 代表我们跟数据库之间的一次连接：这个这个就是SqlSession对象。我们要获得一个SqlSession对象或者说是获得一次连接会话，必须有一个会话工厂SqlSessionFactory。SqlSessionFactory里面又必须包含我们的所有的配置信息，所以我们会通过一个FactoryBuilder来创建工厂类。 接收调用的请求 接收SQL的ID和传入的参数对象 处理操作请求 根据SQL的ID查找对应的MappedStatement对象。 根据传入参数对象解析MappedStatement对象，得到最终要执行的SQL和执行传入参数。 获取数据库连接，根据得到的最终SQL语句和执行传入参数到数据库执行，并得到执行结果。 根据MappedStatement对象中的结果映射配置，对得到的执行结果进行转换处理，并得到最终的处理结果。 释放连接资源。 返回最终的处理结果 我们知道Mybatis是对JDBC的封装，也就是意味着底层一定会出现JDBC的一些核心对象，比如执行SQL的Statement，结果集ResultSet。在Mybatis里面，SqlSession只是提供给应用一个接口，还不是SQL的真正的执行对象。其实SqlSession内部是持有了一个Executor对象，用来封装对数据库的操作。在执行器Executor执行query或者update操作的时候我们创建一系列的对象，来处理参数、执行SQL、处理结果集，这里我们把它简化成一个对象StatementHandler，（但是ExecutorStatementHandler我们都操作不到，底层源码可以看到）以上这些就是Mybatis主要的工作流程。","categories":[{"name":"Mybatis","slug":"Mybatis","permalink":"https://little-follower.github.io/bit-by-bit.github.io/categories/Mybatis/"}],"tags":[{"name":"Mybatis基础","slug":"Mybatis基础","permalink":"https://little-follower.github.io/bit-by-bit.github.io/tags/Mybatis%E5%9F%BA%E7%A1%80/"}]},{"title":"hexo的基本使用","slug":"hello-world","date":"2023-10-24T06:57:06.721Z","updated":"2023-10-24T16:22:59.474Z","comments":false,"path":"2023/10/24/hello-world/","link":"","permalink":"https://little-follower.github.io/bit-by-bit.github.io/2023/10/24/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new &quot;My New Post&quot; More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[{"name":"hexo","slug":"hexo","permalink":"https://little-follower.github.io/bit-by-bit.github.io/categories/hexo/"}],"tags":[{"name":"教程","slug":"教程","permalink":"https://little-follower.github.io/bit-by-bit.github.io/tags/%E6%95%99%E7%A8%8B/"}]}],"categories":[{"name":"Mybatis","slug":"Mybatis","permalink":"https://little-follower.github.io/bit-by-bit.github.io/categories/Mybatis/"},{"name":"hexo","slug":"hexo","permalink":"https://little-follower.github.io/bit-by-bit.github.io/categories/hexo/"}],"tags":[{"name":"Mybatis基础","slug":"Mybatis基础","permalink":"https://little-follower.github.io/bit-by-bit.github.io/tags/Mybatis%E5%9F%BA%E7%A1%80/"},{"name":"教程","slug":"教程","permalink":"https://little-follower.github.io/bit-by-bit.github.io/tags/%E6%95%99%E7%A8%8B/"}]}