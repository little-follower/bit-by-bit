<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>小跟班博客</title>
  <icon>https://www.gravatar.com/avatar/e04ad5241ab83c3d180f07d4776f6a21</icon>
  <subtitle>记录自己的成长与不负韶华</subtitle>
  <link href="https://little-follower.github.io/bit-by-bit.github.io/atom.xml" rel="self"/>
  
  <link href="https://little-follower.github.io/bit-by-bit.github.io/"/>
  <updated>2023-10-31T08:29:29.308Z</updated>
  <id>https://little-follower.github.io/bit-by-bit.github.io/</id>
  
  <author>
    <name>小跟班</name>
    <email>1156542315@qq.com</email>
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Mybatis-基础一</title>
    <link href="https://little-follower.github.io/bit-by-bit.github.io/2023/10/31/mybatis-01%E5%9F%BA%E7%A1%80/"/>
    <id>https://little-follower.github.io/bit-by-bit.github.io/2023/10/31/mybatis-01%E5%9F%BA%E7%A1%80/</id>
    <published>2023-10-31T03:05:09.000Z</published>
    <updated>2023-10-31T08:29:29.308Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Mybatis框架基础"><a href="#Mybatis框架基础" class="headerlink" title="Mybatis框架基础"></a>Mybatis框架基础</h1><blockquote><p>本章主要学习关于mybatis的框架介绍、介绍Mybatis、讲解结构图核心类工作流程、resources下文件打包问题、环境搭建、核心配置文件1、核心配置文件2、核心配置文件3、mapper映射文件1、mapper映射文件2。</p></blockquote><h2 id="Mybatis-的基本信息"><a href="#Mybatis-的基本信息" class="headerlink" title="Mybatis 的基本信息"></a>Mybatis 的基本信息</h2><ol><li>Mybatis本是Apache的一个开源项目iBatis，2010年这个项目由apache software foundation迁移到google code，并且改名为Mybatis。2013年迁移到GitHub。<br>当前，最新版本是MyBatis 3.5.5，其发布时间是2020年06月04日。<br>Mybatis是一个基于Java的数据持久层<em>ORM</em>框架。把实体类和SQL语句之间建立了映射联系，是一种半自动化<em>ORM</em>实现。</li></ol><blockquote><ul><li>ORM 对象关系映射，是一种数据持久化技术<ul><li>O: Object 对象&#x3D;&#x3D;&#x3D;java里的实例类（对象）</li><li>R: Relation 关系&#x3D;&#x3D;&#x3D;关系型数据库表（表）</li><li>M：Mapping 映射&#x3D;&#x3D;&#x3D;提供一种机制，实现映射</li></ul></li><li>半自动化：需要写一些SQL，才能完成，指定功能<ul><li>全自动化：无需使用SQL语句，直接操作实体类对象，就可以对应的操作数据库表里的数据。</li><li>有全自动为什么还需要半自动化？&#x3D;&#x3D;&#x3D;多表查询的时候，分页查询的时候，全自动在进行修改的时候反而很复杂</li></ul></li></ul></blockquote><ol start="2"><li><p>Mybatis支持定制化SQL，存储过程以及高级映射。</p></li><li><p>Mybatis可以使用简单的XML或注解来配置和映射原生信息，将接口和Java的POJOs（Plain Ordinary Java Object，普通的Java对象）映射成数据库中的记录。</p><h2 id="Mybatis与传统的JDBC比较"><a href="#Mybatis与传统的JDBC比较" class="headerlink" title="Mybatis与传统的JDBC比较"></a>Mybatis与传统的JDBC比较</h2><blockquote><p>Mybatis避免了几乎所有的JDBC代码和手动设置参数以及获取结果集</p><ul><li>传统JDBC实现根据用户名查询用户信息代码：</li></ul></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">Class.forName(<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>);</span><br><span class="line"><span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> <span class="string">&quot;jdbc:mysql://localhost:3306/test&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">user</span> <span class="operator">=</span><span class="string">&quot;root&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">password</span> <span class="operator">=</span> <span class="string">&quot;root&quot;</span>;</span><br><span class="line"><span class="type">Connection</span> <span class="variable">connection</span>  <span class="operator">=</span> DriverManager.getConnection(url,user,password);</span><br><span class="line"><span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;SELECT * FROM userinfo where username = ?&quot;</span>;</span><br><span class="line"><span class="type">PreparedStatement</span> <span class="variable">statement</span> <span class="operator">=</span> connection.prepareStatement(sql);</span><br><span class="line">statement .setString(<span class="number">1</span>,<span class="string">&quot;王五&quot;</span>);</span><br><span class="line"><span class="type">ResultSet</span>  <span class="variable">rs</span> <span class="operator">=</span> statement.exctuteQuery();</span><br><span class="line"><span class="keyword">while</span>(rs.next()) &#123;</span><br><span class="line">    System.out.printLn(rs.getString(<span class="string">&quot;id&quot;</span>)+rs.getString(<span class="string">&quot;username&quot;</span>));</span><br><span class="line">&#125;</span><br><span class="line">rs.close();</span><br><span class="line">statement.close();</span><br><span class="line">connection.close;</span><br></pre></td></tr></table></figure><ul><li>发现JDBC操作非常繁琐<ol><li>定义数据连接参数</li><li>打开数据库连接</li><li>声明SQL语句</li><li>预编译并执行SQL语句</li><li>遍历查询结果（如果需要的话），对每一条记录进行处理</li><li>处理事务</li><li>关闭数据库连接</li></ol></li></ul><ul><li>以上步骤每次除了3和5步骤，其他全部是重复工作。</li></ul><blockquote><p>Mybaits配置文件实现根据用户名查询用户信息代码：</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;test&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findUserByName&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;java.lang.String&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.by.pojo.User&quot;</span>&gt;</span></span><br><span class="line">        SELECT * FROM USERINFO WHERE USERNAME LIKE &#x27;%$&#123;value&#125;%&#x27;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="为什么学习Mybatis？"><a href="#为什么学习Mybatis？" class="headerlink" title="为什么学习Mybatis？"></a>为什么学习Mybatis？</h2><ol><li>为了和数据库进行交互，通常的做法是将SQL语句写在Java代码中，SQL语句和Java代码耦合在一起不利于后期维护修改，而Mybatis能够帮助我们将SQL语句和Java代码分离，方便了后期因需求变动而对SQL语句进行修改。</li><li>采用<em>ORM</em>思想解决了实体对象和数据库映射的问题，对JDBC进行了分装，屏蔽了JDBC api底层访问细节，使我们不用与JDBC api打交道，就可以完成对数据库的持久化操作；同时Mybatis封装了绝大部分JDBC中参数设置和返回值接收工作，我们不需要编写大量臃肿代码。</li></ol><h2 id="Mybatis框架功能架构"><a href="#Mybatis框架功能架构" class="headerlink" title="Mybatis框架功能架构"></a>Mybatis框架功能架构</h2><p><img src="/bit-by-bit.github.io/img/mybatis-01/myabtisjiegoutu.png"></p><blockquote><p>Mybatis 框架功能架构分为三层：</p><ol><li>API 接口层：</li><li>首先接口层使我们打交道最多的。核心对象是SqlSession,它是上层应用和Mybatis打交道的桥梁，SqlSession上定义了非常多的对数据库的操作方法。接口层在接收到调用请求的时候，会调用核心处理层的相应模块来完成具体的数据库操作。</li><li>数据库处理层&#x2F;核心处理层：跟数据库操作相关的动作都是在这一层完成的。核心处理层主要做了这几件事：<ol><li>把接口中传入的参数解析并且映射成JDBC类型；</li><li>解析XML文件中的SQL语句，包括插入参数和动态SQL的生成；</li><li>执行SQL语句；</li><li>处理结果集，并映射成Java对象；</li></ol></li><li>基础支撑层：基础支持层主要是一些抽象出来的通用的功能（实现复用），比如数据源、缓存、日志、XML解析、反射、IO、事务等等这些功能。为上层的数据处理层提供最基础的支撑。</li></ol></blockquote></li></ol><h2 id="Mybatis核心类及工作流程"><a href="#Mybatis核心类及工作流程" class="headerlink" title="Mybatis核心类及工作流程"></a>Mybatis核心类及工作流程</h2><h3 id="SqlSessionFactory"><a href="#SqlSessionFactory" class="headerlink" title="SqlSessionFactory"></a>SqlSessionFactory</h3><blockquote><p>每个基于Mybatis的应用都是以一个SqlSessionFactory的实例为中心。SqlSessionFactory的实例可以通过SqlSessionFactoryBuilder获得。而SqlSessionFactoryBuilder则可以从XML配置文件或者通过Java的方式构建出SqlSessionFactory的实例。SqlSessionFactory一但被创建就应该在应用的运行期间一直存在。一个SqlSessionFactory对应配置文件中的一个环境（environment），如果你要是用读个数据库就配置多个环境分别对应一个SqlSessionFactory。</p></blockquote><h3 id="SqlSession"><a href="#SqlSession" class="headerlink" title="SqlSession"></a>SqlSession</h3><blockquote><p>SqlSession是一个接口，它有两个实现类，分别是DefaultSqlSession（默认使用）以及SqlSessionManager。SqlSession通过内部存放的执行器（Executor）来对数据进行CRUD。此外SqlSession不是线程安全的，因为每一次操作完数据库都要调用cloes对其进行关闭，官方建议通过try-finally来保证总是关闭SqlSession。</p></blockquote><h3 id="Executor"><a href="#Executor" class="headerlink" title="Executor"></a>Executor</h3><blockquote><p>Executor（执行器）接口有两个实现类，其中BaseExecutor有三个继承类分别是BatchExcutor（重用语句并执行批量更新），ReuseExecutor（重用预处理语句prepared statement，跟Simple的唯一区别就是内部缓存statement），SimpleExecutor（默认，每次都会创建新的statement）。以上三个就是主要的Executor、我们可以用CachingExecutor内装饰前面的三个执行器目的就是用来实现缓存。</p></blockquote><p><img src="/bit-by-bit.github.io/img/mybatis-01/executor.png"></p><h3 id="MappedStatement"><a href="#MappedStatement" class="headerlink" title="MappedStatement"></a>MappedStatement</h3><blockquote><p>MappedStatement就是用来存放我们SQL映射文件中的信息包括SQL语句，输入参数、输出参数等等。一个SQL对应一个MappedStatement对象。</p></blockquote><h3 id="Mybatis工作流程"><a href="#Mybatis工作流程" class="headerlink" title="Mybatis工作流程"></a>Mybatis工作流程</h3><p><img src="/bit-by-bit.github.io/img/mybatis-01/mybatiszhixingliuchen.png"></p><blockquote><ol><li><p>加载配置文件并初始化</p><p>首先在Mybatis启动的时候我们要去解析配置文件，包括全局配置文件和映射文件和映射器配置文件。全局配置文件里面包含了我们怎么控制Mybatis的行为，我们会把它们解析成一个Configuration对象。映射器配置文件包含了我们要对数据库下达的指令。也就是我们的SQL信息。然后一个SQL节点会被对应解析成一个MappedStatement对象存储在内存中。</p><p>接下来就是我们操作数据的接口，他在应用程序和数据库中间。</p><p>代表我们跟数据库之间的一次连接：这个这个就是SqlSession对象。我们要获得一个SqlSession对象或者说是获得一次连接会话，必须有一个会话工厂SqlSessionFactory。SqlSessionFactory里面又必须包含我们的所有的配置信息，所以我们会通过一个FactoryBuilder来创建工厂类。</p></li></ol></blockquote><blockquote><ol start="2"><li><p>接收调用的请求</p><p>接收SQL的ID和传入的参数对象</p></li></ol></blockquote><blockquote><ol start="3"><li>处理操作请求<ol><li>根据SQL的ID查找对应的MappedStatement对象。</li><li>根据传入参数对象解析MappedStatement对象，得到最终要执行的SQL和执行传入参数。</li><li>获取数据库连接，根据得到的最终SQL语句和执行传入参数到数据库执行，并得到执行结果。</li><li>根据MappedStatement对象中的结果映射配置，对得到的执行结果进行转换处理，并得到最终的处理结果。</li><li>释放连接资源。</li></ol></li></ol></blockquote><blockquote><ol start="4"><li><p>返回最终的处理结果</p><p>我们知道Mybatis是对JDBC的封装，也就是意味着底层一定会出现JDBC的一些核心对象，比如执行SQL的Statement，结果集ResultSet。在Mybatis里面，SqlSession只是提供给应用一个接口，还不是SQL的真正的执行对象。其实SqlSession内部是持有了一个Executor对象，用来封装对数据库的操作。在执行器Executor执行query或者update操作的时候我们创建一系列的对象，来处理参数、执行SQL、处理结果集，这里我们把它简化成一个对象StatementHandler，（但是ExecutorStatementHandler我们都操作不到，底层源码可以看到）以上这些就是Mybatis主要的工作流程。</p></li></ol></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Mybatis框架基础&quot;&gt;&lt;a href=&quot;#Mybatis框架基础&quot; class=&quot;headerlink&quot; title=&quot;Mybatis框架基础&quot;&gt;&lt;/a&gt;Mybatis框架基础&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;本章主要学习关于mybatis的框架介绍、</summary>
      
    
    
    
    <category term="Mybatis" scheme="https://little-follower.github.io/bit-by-bit.github.io/categories/Mybatis/"/>
    
    
    <category term="Mybatis基础" scheme="https://little-follower.github.io/bit-by-bit.github.io/tags/Mybatis%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>hexo的基本使用</title>
    <link href="https://little-follower.github.io/bit-by-bit.github.io/2023/10/24/hello-world/"/>
    <id>https://little-follower.github.io/bit-by-bit.github.io/2023/10/24/hello-world/</id>
    <published>2023-10-24T06:57:06.721Z</published>
    <updated>2023-10-24T16:22:59.474Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for</summary>
      
    
    
    
    <category term="hexo" scheme="https://little-follower.github.io/bit-by-bit.github.io/categories/hexo/"/>
    
    
    <category term="教程" scheme="https://little-follower.github.io/bit-by-bit.github.io/tags/%E6%95%99%E7%A8%8B/"/>
    
  </entry>
  
</feed>
